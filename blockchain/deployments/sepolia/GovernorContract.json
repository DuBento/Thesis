{
  "address": "0x7fEe74f33B3159b9A39A12C4c72Ed3561FF340a2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IExecutor",
          "name": "executor_",
          "type": "address"
        },
        {
          "internalType": "contract IUserRegistry",
          "name": "userRegistry_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "votingPeriod_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "GovernorAlreadyCastVote",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "targets",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "calldatas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "values",
          "type": "uint256"
        }
      ],
      "name": "GovernorInvalidProposalLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GovernorInvalidVoteType",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "votingPeriod",
          "type": "uint256"
        }
      ],
      "name": "GovernorInvalidVotingPeriod",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "GovernorNonexistentProposal",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "GovernorOnlyExecutor",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "GovernorOnlyProposer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votes",
          "type": "uint256"
        }
      ],
      "name": "GovernorProposalAlreadyVotedOn",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "enum IGovernor.ProposalState",
          "name": "current",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "expectedStates",
          "type": "bytes32"
        }
      ],
      "name": "GovernorUnexpectedProposalState",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "bits",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SafeCastOverflowedUintDowncast",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldExecutor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newExecutor",
          "type": "address"
        }
      ],
      "name": "ExecutorChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ProposalCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "signatures",
          "type": "string[]"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "voteStart",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "voteEnd",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ProposalExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IUserRegistry",
          "name": "oldUserRegistry",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IUserRegistry",
          "name": "newUserRegistry",
          "type": "address"
        }
      ],
      "name": "UserRegistryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "support",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "VoteCast",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldVotingPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newVotingPeriod",
          "type": "uint256"
        }
      ],
      "name": "VotingPeriodSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CLOCK_MODE",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COUNTING_MODE",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes32",
          "name": "descriptionHash",
          "type": "bytes32"
        }
      ],
      "name": "cancel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "support",
          "type": "uint8"
        }
      ],
      "name": "castVote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "support",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "castVoteWithReason",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "clock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes32",
          "name": "descriptionHash",
          "type": "bytes32"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "getProposalVotesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getVotes",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes32",
          "name": "descriptionHash",
          "type": "bytes32"
        }
      ],
      "name": "hashProposal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "proposalDeadline",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "proposalProposer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "proposalSnapshot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "proposalVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "againstVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "forVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "abstainVotes",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "propose",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quorum",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newVotingPeriod",
          "type": "uint256"
        }
      ],
      "name": "setVotingPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "state",
      "outputs": [
        {
          "internalType": "enum IGovernor.ProposalState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "userRegistry",
      "outputs": [
        {
          "internalType": "contract IUserRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc825244e18bcd6a6f9293d86b5b23ff45881d488eb0adf02987c5378e3442857",
  "receipt": {
    "to": null,
    "from": "0x90A84A551585BcC79D35Cc737e1A54DfD9ca8eF6",
    "contractAddress": "0x7fEe74f33B3159b9A39A12C4c72Ed3561FF340a2",
    "transactionIndex": 58,
    "gasUsed": "1666696",
    "logsBloom": "0x
    "blockHash": "0x54bd94b298190c81082abaa81ba4c52a6bb5e97cc392ff1e9a8f24d939a6df03",
    "transactionHash": "0xc825244e18bcd6a6f9293d86b5b23ff45881d488eb0adf02987c5378e3442857",
    "logs": [
      {
        "transactionIndex": 58,
        "blockNumber": 4348434,
        "transactionHash": "0xc825244e18bcd6a6f9293d86b5b23ff45881d488eb0adf02987c5378e3442857",
        "address": "0x7fEe74f33B3159b9A39A12C4c72Ed3561FF340a2",
        "topics": [
          "0x7e3f7f0708a84de9203036abaa450dccc85ad5ff52f78c170f3edb55cf5e8828"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c4e0",
        "logIndex": 120,
        "blockHash": "0x54bd94b298190c81082abaa81ba4c52a6bb5e97cc392ff1e9a8f24d939a6df03"
      }
    ],
    "blockNumber": 4348434,
    "cumulativeGasUsed": "14299784",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9EE089f9d09Cc2c0a2c193237b3492e001761Be2",
    "0xBf26ADb0c610B7D3862A0A4deaf15B2186C91d6D",
    50400
  ],
  "numDeployments": 1,
  "solcInputHash": "a7daef901358217ccbb33396f758b6c0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IExecutor\",\"name\":\"executor_\",\"type\":\"address\"},{\"internalType\":\"contract IUserRegistry\",\"name\":\"userRegistry_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPeriod_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"GovernorAlreadyCastVote\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"targets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"calldatas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"values\",\"type\":\"uint256\"}],\"name\":\"GovernorInvalidProposalLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernorInvalidVoteType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"votingPeriod\",\"type\":\"uint256\"}],\"name\":\"GovernorInvalidVotingPeriod\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"GovernorNonexistentProposal\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"GovernorOnlyExecutor\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"GovernorOnlyProposer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"name\":\"GovernorProposalAlreadyVotedOn\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"enum IGovernor.ProposalState\",\"name\":\"current\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"expectedStates\",\"type\":\"bytes32\"}],\"name\":\"GovernorUnexpectedProposalState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldExecutor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newExecutor\",\"type\":\"address\"}],\"name\":\"ExecutorChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voteStart\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voteEnd\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IUserRegistry\",\"name\":\"oldUserRegistry\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IUserRegistry\",\"name\":\"newUserRegistry\",\"type\":\"address\"}],\"name\":\"UserRegistryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldVotingPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVotingPeriod\",\"type\":\"uint256\"}],\"name\":\"VotingPeriodSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLOCK_MODE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COUNTING_MODE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"descriptionHash\",\"type\":\"bytes32\"}],\"name\":\"cancel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"}],\"name\":\"castVote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"castVoteWithReason\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"descriptionHash\",\"type\":\"bytes32\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposalVotesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"descriptionHash\",\"type\":\"bytes32\"}],\"name\":\"hashProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"proposalDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"proposalProposer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"proposalSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"proposalVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"abstainVotes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorum\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newVotingPeriod\",\"type\":\"uint256\"}],\"name\":\"setVotingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum IGovernor.ProposalState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userRegistry\",\"outputs\":[{\"internalType\":\"contract IUserRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"GovernorAlreadyCastVote(address)\":[{\"details\":\"The vote was already cast.\"}],\"GovernorInvalidProposalLength(uint256,uint256,uint256)\":[{\"details\":\"Empty proposal or a mismatch between the parameters length for a proposal call.\"}],\"GovernorInvalidVoteType()\":[{\"details\":\"The vote type used is not valid for the corresponding counting module.\"}],\"GovernorInvalidVotingPeriod(uint256)\":[{\"details\":\"The voting period set is not a valid period.\"}],\"GovernorNonexistentProposal(uint256)\":[{\"details\":\"The `proposalId` doesn't exist.\"}],\"GovernorOnlyExecutor(address)\":[{\"details\":\"The `account` is not the governance executor.\"}],\"GovernorOnlyProposer(address)\":[{\"details\":\"The `account` is not a proposer.\"}],\"GovernorProposalAlreadyVotedOn(uint256,uint256)\":[{\"details\":\"Cannot cancel proposal because it has been voted on.\"}],\"GovernorUnexpectedProposalState(uint256,uint8,bytes32)\":[{\"details\":\"The current state of a proposal is not the required for performing an operation. The `expectedStates` is a bitmap with the bits enabled for each ProposalState enum position counting from right to left. NOTE: If `expectedState` is `bytes32(0)`, the proposal is expected to not be in any state (i.e. not exist). This is the case when a proposal that is expected to be unset is already initiated (the proposal is duplicated). See {Governor-_encodeStateBitmap}.\"}],\"SafeCastOverflowedUintDowncast(uint8,uint256)\":[{\"details\":\"Value doesn't fit in an uint of `bits` size.\"}]},\"events\":{\"ExecutorChange(address,address)\":{\"details\":\"Emitted when the executor used for proposal execution is modified.\"},\"ProposalCanceled(uint256)\":{\"details\":\"Emitted when a proposal is canceled.\"},\"ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string)\":{\"details\":\"Emitted when a proposal is created.\"},\"ProposalExecuted(uint256)\":{\"details\":\"Emitted when a proposal is executed.\"},\"VoteCast(address,uint256,uint8,uint256,string)\":{\"details\":\"Emitted when a vote. Note: `support` values should be seen as buckets. Their interpretation depends on the voting module used.\"}},\"kind\":\"dev\",\"methods\":{\"CLOCK_MODE()\":{\"details\":\"Machine-readable description of the clock as specified in EIP-6372.\"},\"COUNTING_MODE()\":{\"details\":\"See {IGovernor-COUNTING_MODE}.\"},\"cancel(address[],uint256[],bytes[],bytes32)\":{\"details\":\"See {IGovernor-cancel}.\"},\"castVote(uint256,uint8)\":{\"details\":\"See {IGovernor-castVote}.\"},\"castVoteWithReason(uint256,uint8,string)\":{\"details\":\"See {IGovernor-castVoteWithReason}.\"},\"clock()\":{\"details\":\"Clock (as specified in EIP-6372) is set to timestamp..\"},\"execute(address[],uint256[],bytes[],bytes32)\":{\"details\":\"See {IGovernor-execute}.\"},\"getProposalVotesCount(uint256)\":{\"details\":\"See {IGovernor-getProposalVotesCount}.\"},\"getVotes(address)\":{\"details\":\"See {IGovernor-getVotes}.\"},\"hasVoted(uint256,address)\":{\"details\":\"See {IGovernor-hasVoted}.\"},\"hashProposal(address[],uint256[],bytes[],bytes32)\":{\"details\":\"See {IGovernor-hashProposal}. The proposal id is produced by hashing the ABI encoded `targets` array, the `values` array, the `calldatas` array and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in advance, before the proposal is submitted. Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the same proposal (with same operation and same description) will have the same id if submitted on multiple governors across multiple networks. This also means that in order to execute the same operation twice (on the same governor) the proposer will have to change the description in order to avoid proposal id conflicts.\"},\"name()\":{\"details\":\"See {IGovernor-name}.\"},\"proposalDeadline(uint256)\":{\"details\":\"See {IGovernor-proposalDeadline}.\"},\"proposalProposer(uint256)\":{\"details\":\"Returns the account that created a given proposal.\"},\"proposalSnapshot(uint256)\":{\"details\":\"See {IGovernor-proposalSnapshot}.\"},\"proposalVotes(uint256)\":{\"details\":\"Accessor to the internal vote counts.\"},\"propose(address[],uint256[],bytes[],string)\":{\"details\":\"See {IGovernor-propose}. This function has opt-in frontrunning protection, described in {_isValidDescriptionForProposer}.\"},\"quorum()\":{\"details\":\"Minimum number of cast voted required for a proposal to be successful.\"},\"setVotingPeriod(uint256)\":{\"details\":\"Update the voting period. This operation can only be performed through a governance proposal. Emits a {VotingPeriodSet} event.\"},\"state(uint256)\":{\"details\":\"See {IGovernor-state}.\"}},\"stateVariables\":{\"QUORUM\":{\"details\":\"Set low value during development, should be adjusted in production. Possible value 51 for majority.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"quorum()\":{\"notice\":\"module:user-config\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DAO/GovernorContract.sol\":\"GovernorContract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/ConformityState.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ncontract ConformityState {\\n    enum State {\\n        FUNCTIONING,\\n        CORRECTIVE_MEASURE_NEEDED,\\n        WAITING_REVIEW\\n    }\\n\\n    State public constant CONFORMITY_STATE_FUNCTIONING = State.FUNCTIONING;\\n    State public constant CONFORMITY_STATE_CORRECTIVE_MEASURE_NEEDED =\\n        State.CORRECTIVE_MEASURE_NEEDED;\\n    State public constant CONFORMITY_STATE_WAITING_REVIEW =\\n        State.WAITING_REVIEW;\\n\\n    // Errors\\n    error InvalidConformityState();\\n\\n    function assertValidConformityState(State state_) internal pure {\\n        if (\\n            state_ != State.FUNCTIONING &&\\n            state_ != State.CORRECTIVE_MEASURE_NEEDED &&\\n            state_ != State.WAITING_REVIEW\\n        ) revert InvalidConformityState();\\n    }\\n}\\n\",\"keccak256\":\"0x218bd1f046511e60abbe3260e066efe507bd153c399b24d737abcc7c6c7f928e\",\"license\":\"Apache-2.0\"},\"contracts/DAO/GovernorContract.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport \\\"./governance/extensions/GovernorCountingSimple.sol\\\";\\nimport \\\"./governance/extensions/GovernorVotes.sol\\\";\\nimport \\\"./governance/extensions/GovernorSettings.sol\\\";\\nimport \\\"./governance/Governor.sol\\\";\\nimport \\\"./IExecutor.sol\\\";\\nimport \\\"./IUserRegistry.sol\\\";\\n\\ncontract GovernorContract is\\n    Governor,\\n    GovernorSettings,\\n    GovernorCountingSimple,\\n    GovernorVotes\\n{\\n    /** @dev Set low value during development, should be adjusted in production.\\n     * Possible value 51 for majority.\\n     */\\n    uint8 constant QUORUM = 25;\\n\\n    constructor(\\n        IExecutor executor_,\\n        IUserRegistry userRegistry_,\\n        uint256 votingPeriod_\\n    )\\n        Governor(\\\"TracerDAO\\\", executor_)\\n        GovernorSettings(votingPeriod_)\\n        GovernorVotes(userRegistry_)\\n    {}\\n\\n    // The following functions are overrides required by Solidity.\\n\\n    function quorum() public pure override returns (uint8) {\\n        return QUORUM;\\n    }\\n\\n    function votingPeriod()\\n        public\\n        view\\n        override(IGovernor, GovernorSettings)\\n        returns (uint256)\\n    {\\n        return super.votingPeriod();\\n    }\\n}\\n\",\"keccak256\":\"0xd4e37469db9d19b9dfa984db80c4bc4b35e2a82f7195a61acdf0d676d44ebe37\",\"license\":\"Apache-2.0\"},\"contracts/DAO/IExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n// Based on Openzeppelin Contracts (last updated v4.9.0)\\n\\npragma solidity ^0.8.19;\\n\\nabstract contract IExecutor {\\n    /**\\n     * @dev Emitted when a call is performed as part of operation `id`.\\n     */\\n    event CallExecuted(\\n        bytes32 indexed id,\\n        uint256 indexed index,\\n        address target,\\n        uint256 value,\\n        bytes data\\n    );\\n\\n    // Errors\\n    /**\\n     * @dev Prevent reentrant calls.\\n     */\\n    error ReentrantCall();\\n\\n    /**\\n     * @dev Mismatch between the parameters length for an operation call.\\n     */\\n    error ExecutorInvalidOperationLength(\\n        uint256 targets,\\n        uint256 payloads,\\n        uint256 values\\n    );\\n\\n    /**\\n     * @dev Contract might receive/hold ETH as part of the maintenance process.\\n     */\\n    receive() external payable virtual;\\n\\n    /**\\n     * @dev Execute an (ready) operation containing a single transaction.\\n     *\\n     * Emits a {CallExecuted} event.\\n     *\\n     * Only owner can execute, usually Governor Contract.\\n     */\\n    function execute(\\n        address target,\\n        uint256 value,\\n        bytes calldata payload,\\n        bytes32 salt\\n    ) public payable virtual;\\n\\n    /**\\n     * @dev Execute an (ready) operation containing a batch of transactions.\\n     *\\n     * Emits one {CallExecuted} event per transaction in the batch.\\n     *\\n     * Only owner can execute, usually Governor Contract.\\n     */\\n    function executeBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata payloads,\\n        bytes32 salt\\n    ) public payable virtual;\\n\\n    /**\\n     * @dev Returns the identifier of an operation containing a single\\n     * transaction.\\n     */\\n    function hashOperation(\\n        address target,\\n        uint256 value,\\n        bytes calldata data,\\n        bytes32 salt\\n    ) public pure virtual returns (bytes32) {\\n        return keccak256(abi.encode(target, value, data, salt));\\n    }\\n\\n    /**\\n     * @dev Returns the identifier of an operation containing a batch of\\n     * transactions.\\n     */\\n    function hashOperationBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata payloads,\\n        bytes32 salt\\n    ) public pure virtual returns (bytes32) {\\n        return keccak256(abi.encode(targets, values, payloads, salt));\\n    }\\n}\\n\",\"keccak256\":\"0x43106a629c8319d9316e8a3f4f2dafa11369f35be344f4c9b83dcce0e79b7a65\",\"license\":\"Apache-2.0\"},\"contracts/DAO/IUserRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport \\\"../ConformityState.sol\\\";\\n\\n/** @dev @TODO docs\\n */\\nabstract contract IUserRegistry {\\n    uint8 constant MAX_VOTING_POWER = 49;\\n\\n    // Type declarations\\n    struct Member {\\n        address addr;\\n        uint8 votingPower;\\n        ConformityState.State state;\\n        address managingContractAddress;\\n        string name;\\n        string infoURI;\\n    }\\n\\n    struct Actor {\\n        address addr;\\n        ConformityState.State state;\\n        string name;\\n        string infoURI;\\n        address[] participatingContracts;\\n    }\\n\\n    // Errors\\n    error UserAlreadyExists();\\n    error MemberDoesNotExist();\\n    error ActorDoesNotExist();\\n    error TransactionNotFromOriginalActorAddress();\\n    error UserCannotManageContract();\\n    error InvalidVotingPower(uint8 votingPower);\\n\\n    function setTraceabilityContractFactoryAddress(\\n        address addr_\\n    ) external virtual;\\n\\n    function getMember(\\n        address addr_\\n    ) public view virtual returns (Member memory);\\n\\n    function getActor(address addr_) public view virtual returns (Actor memory);\\n\\n    function getActorName(\\n        address addr_\\n    ) public view virtual returns (string memory);\\n\\n    function getVotes(address member_) public view virtual returns (uint8);\\n\\n    function getManagingContractAddress(\\n        address addr_\\n    ) public view virtual returns (address);\\n\\n    function addMember(\\n        address addr_,\\n        string calldata name_,\\n        string calldata infoURI_,\\n        uint8 votingPower_\\n    ) public virtual;\\n\\n    function updateMember(\\n        address addr_,\\n        string calldata name_,\\n        string calldata infoURI_\\n    ) public virtual;\\n\\n    function updateMember(\\n        address addr_,\\n        address managingContractAddress_\\n    ) public virtual;\\n\\n    function updateMemberState(\\n        address addr_,\\n        ConformityState.State newState_\\n    ) public virtual;\\n\\n    function addActor(\\n        address addr_,\\n        string calldata name_,\\n        string calldata infoURI_\\n    ) public virtual;\\n\\n    function updateActor(\\n        address addr_,\\n        string calldata name_,\\n        string calldata infoURI_\\n    ) public virtual;\\n\\n    function updateActorState(\\n        address addr_,\\n        ConformityState.State newState_\\n    ) public virtual;\\n\\n    function addContractToActor(\\n        address contract_,\\n        address actor_\\n    ) public virtual;\\n\\n    function checkAccess(\\n        address contract_,\\n        address addr_\\n    ) public view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0x9bdbf52d0c0c337c3c4f685b7d2d8ead3d529cebcb71869f719dfc8dbb346450\",\"license\":\"Apache-2.0\"},\"contracts/DAO/governance/Governor.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n// Based on Openzeppelin Contracts (last updated v4.9.1)\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"../../OpenZeppelin/utils/math/SafeCast.sol\\\";\\nimport \\\"../../OpenZeppelin/utils/Address.sol\\\";\\nimport \\\"./extensions/GovernorExecutor.sol\\\";\\nimport \\\"./IGovernor.sol\\\";\\n\\n/**\\n * @dev Core of the governance system, designed to be extended though various modules.\\n *\\n * This contract is abstract and requires several functions to be implemented in various modules:\\n *\\n * - A counting module must implement {quorum}, {_quorumReached}, {_voteSucceeded} and {_countVote}\\n * - A voting module must implement {_getVotes}\\n * - Additionally, {votingPeriod} must also be implemented\\n *\\n * Modified version of governance contracts from OpenZeppelin v4.9.1\\n */\\nabstract contract Governor is GovernorExecutor, IGovernor {\\n    struct ProposalCore {\\n        uint64 voteStart;\\n        address proposer;\\n        uint64 voteEnd;\\n        bool executed;\\n        bool canceled;\\n    }\\n    // solhint-enable var-name-mixedcase\\n\\n    bytes32 private constant _ALL_PROPOSAL_STATES_BITMAP =\\n        bytes32((2 ** (uint8(type(ProposalState).max) + 1)) - 1);\\n    string private _name;\\n\\n    /// @custom:oz-retyped-from mapping(uint256 => Governor.ProposalCore)\\n    mapping(uint256 => ProposalCore) private _proposals;\\n\\n    /**\\n     * @dev Restricts a function so it can only be executed through governance proposals. For example, governance\\n     * parameter setters in {GovernorSettings} are protected using this modifier.\\n     *\\n     * The governance executing address may be different from the Governor's own address, for example it could be a\\n     * timelock. This can be customized by modules by overriding {_executor}. The executor is only able to invoke these\\n     * functions during the execution of the governor's {execute} function, and not under any other circumstances. Thus,\\n     * for example, additional timelock proposers are not able to change governance parameters without going through the\\n     * governance protocol (since v4.6).\\n     */\\n    modifier onlyGovernance() {\\n        if (_executor() != msg.sender) {\\n            revert GovernorOnlyExecutor(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Sets the value for {name} and {version}\\n     */\\n    constructor(\\n        string memory name_,\\n        IExecutor executor_\\n    ) GovernorExecutor(executor_) {\\n        _name = name_;\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-hashProposal}.\\n     *\\n     * The proposal id is produced by hashing the ABI encoded `targets` array, the `values` array, the `calldatas` array\\n     * and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id\\n     * can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in\\n     * advance, before the proposal is submitted.\\n     *\\n     * Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the\\n     * same proposal (with same operation and same description) will have the same id if submitted on multiple governors\\n     * across multiple networks. This also means that in order to execute the same operation twice (on the same\\n     * governor) the proposer will have to change the description in order to avoid proposal id conflicts.\\n     */\\n    function hashProposal(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public pure virtual override returns (uint256) {\\n        return\\n            uint256(\\n                keccak256(\\n                    abi.encode(targets, values, calldatas, descriptionHash)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-state}.\\n     */\\n    function state(\\n        uint256 proposalId\\n    ) public view virtual override returns (ProposalState) {\\n        ProposalCore storage proposal = _proposals[proposalId];\\n\\n        if (proposal.executed) {\\n            return ProposalState.Executed;\\n        }\\n\\n        if (proposal.canceled) {\\n            return ProposalState.Canceled;\\n        }\\n\\n        uint256 snapshot = proposalSnapshot(proposalId);\\n\\n        if (snapshot == 0) {\\n            revert GovernorNonexistentProposal(proposalId);\\n        }\\n\\n        uint256 currentTimepoint = clock();\\n        uint256 deadline = proposalDeadline(proposalId);\\n\\n        if (deadline < currentTimepoint) {\\n            return ProposalState.Expired;\\n        }\\n\\n        if (_quorumReached(proposalId)) {\\n            if (_voteSucceeded(proposalId)) {\\n                return ProposalState.Succeeded;\\n            } else {\\n                return ProposalState.Defeated;\\n            }\\n        } else {\\n            return ProposalState.Active;\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-proposalSnapshot}.\\n     */\\n    function proposalSnapshot(\\n        uint256 proposalId\\n    ) public view virtual override returns (uint256) {\\n        return _proposals[proposalId].voteStart;\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-proposalDeadline}.\\n     */\\n    function proposalDeadline(\\n        uint256 proposalId\\n    ) public view virtual override returns (uint256) {\\n        return _proposals[proposalId].voteEnd;\\n    }\\n\\n    /**\\n     * @dev Returns the account that created a given proposal.\\n     */\\n    function proposalProposer(\\n        uint256 proposalId\\n    ) public view virtual override returns (address) {\\n        return _proposals[proposalId].proposer;\\n    }\\n\\n    /**\\n     * @dev Amount of votes already cast passes the threshold limit.\\n     */\\n    function _quorumReached(\\n        uint256 proposalId\\n    ) internal view virtual returns (bool);\\n\\n    /**\\n     * @dev Is the proposal successful or not.\\n     */\\n    function _voteSucceeded(\\n        uint256 proposalId\\n    ) internal view virtual returns (bool);\\n\\n    /**\\n     * @dev Get the voting weight of `account`.\\n     */\\n    function _getVotes(address account) internal view virtual returns (uint8);\\n\\n    /**\\n     * @dev Register a vote for `proposalId` by `account` with a given `support` and voting `weight``.\\n     *\\n     * Note: Support is generic and can represent various things depending on the voting system used.\\n     */\\n    function _countVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        uint256 weight\\n    ) internal virtual;\\n\\n    /**\\n     * @dev See {IGovernor-propose}. This function has opt-in frontrunning protection, described in {_isValidDescriptionForProposer}.\\n     */\\n    function propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) public virtual override returns (uint256) {\\n        address proposer = msg.sender;\\n\\n        uint256 currentTimepoint = clock();\\n\\n        uint256 proposalId = hashProposal(\\n            targets,\\n            values,\\n            calldatas,\\n            keccak256(bytes(description))\\n        );\\n\\n        if (\\n            targets.length != values.length ||\\n            targets.length != calldatas.length ||\\n            targets.length == 0\\n        ) {\\n            revert GovernorInvalidProposalLength(\\n                targets.length,\\n                calldatas.length,\\n                values.length\\n            );\\n        }\\n        if (_proposals[proposalId].voteStart != 0) {\\n            revert GovernorUnexpectedProposalState(\\n                proposalId,\\n                state(proposalId),\\n                bytes32(0)\\n            );\\n        }\\n\\n        uint256 deadline = currentTimepoint + votingPeriod();\\n\\n        _proposals[proposalId] = ProposalCore({\\n            proposer: proposer,\\n            voteStart: SafeCast.toUint64(currentTimepoint),\\n            voteEnd: SafeCast.toUint64(deadline),\\n            executed: false,\\n            canceled: false\\n        });\\n\\n        emit ProposalCreated(\\n            proposalId,\\n            proposer,\\n            targets,\\n            values,\\n            new string[](targets.length),\\n            calldatas,\\n            currentTimepoint,\\n            deadline,\\n            description\\n        );\\n\\n        return proposalId;\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-execute}.\\n     */\\n    function execute(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public payable virtual override returns (uint256) {\\n        uint256 proposalId = hashProposal(\\n            targets,\\n            values,\\n            calldatas,\\n            descriptionHash\\n        );\\n\\n        ProposalState currentState = state(proposalId);\\n        if (currentState != ProposalState.Succeeded) {\\n            revert GovernorUnexpectedProposalState(\\n                proposalId,\\n                currentState,\\n                _encodeStateBitmap(ProposalState.Succeeded)\\n            );\\n        }\\n        _proposals[proposalId].executed = true;\\n\\n        emit ProposalExecuted(proposalId);\\n\\n        _execute(targets, values, calldatas, descriptionHash);\\n\\n        return proposalId;\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-cancel}.\\n     */\\n    function cancel(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public virtual override returns (uint256) {\\n        uint256 proposalId = hashProposal(\\n            targets,\\n            values,\\n            calldatas,\\n            descriptionHash\\n        );\\n        uint256 voteCount = getProposalVotesCount(proposalId);\\n        if (voteCount != 0) {\\n            revert GovernorProposalAlreadyVotedOn(proposalId, voteCount);\\n        }\\n        if (msg.sender != proposalProposer(proposalId)) {\\n            revert GovernorOnlyProposer(msg.sender);\\n        }\\n        return _cancel(targets, values, calldatas, descriptionHash);\\n    }\\n\\n    /**\\n     * @dev Internal cancel mechanism: locks up the proposal timer, preventing it from being re-submitted. Marks it as\\n     * canceled to allow distinguishing it from executed proposals.\\n     *\\n     * Emits a {IGovernor-ProposalCanceled} event.\\n     */\\n    function _cancel(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) internal virtual returns (uint256) {\\n        uint256 proposalId = hashProposal(\\n            targets,\\n            values,\\n            calldatas,\\n            descriptionHash\\n        );\\n\\n        ProposalState currentState = state(proposalId);\\n\\n        bytes32 forbiddenStates = _encodeStateBitmap(ProposalState.Canceled) |\\n            _encodeStateBitmap(ProposalState.Expired) |\\n            _encodeStateBitmap(ProposalState.Executed);\\n        if (forbiddenStates & _encodeStateBitmap(currentState) != 0) {\\n            revert GovernorUnexpectedProposalState(\\n                proposalId,\\n                currentState,\\n                _ALL_PROPOSAL_STATES_BITMAP ^ forbiddenStates\\n            );\\n        }\\n        _proposals[proposalId].canceled = true;\\n\\n        emit ProposalCanceled(proposalId);\\n\\n        return proposalId;\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-getVotes}.\\n     */\\n    function getVotes(\\n        address account\\n    ) public view virtual override returns (uint8) {\\n        return _getVotes(account);\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-castVote}.\\n     */\\n    function castVote(\\n        uint256 proposalId,\\n        uint8 support\\n    ) public virtual override returns (uint256) {\\n        address voter = msg.sender;\\n        return _castVote(proposalId, voter, support, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-castVoteWithReason}.\\n     */\\n    function castVoteWithReason(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason\\n    ) public virtual override returns (uint256) {\\n        address voter = msg.sender;\\n        return _castVote(proposalId, voter, support, reason);\\n    }\\n\\n    /**\\n     * @dev Internal vote casting mechanism: Check that the vote is pending, that it has not been cast yet, retrieve\\n     * voting weight using {IGovernor-getVotes} and call the {_countVote} internal function.\\n     *\\n     * Emits a {IGovernor-VoteCast} event.\\n     */\\n    function _castVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        string memory reason\\n    ) internal virtual returns (uint256) {\\n        ProposalState currentState = state(proposalId);\\n        if (currentState != ProposalState.Active) {\\n            revert GovernorUnexpectedProposalState(\\n                proposalId,\\n                currentState,\\n                _encodeStateBitmap(ProposalState.Active)\\n            );\\n        }\\n\\n        uint256 weight = _getVotes(account);\\n        _countVote(proposalId, account, support, weight);\\n\\n        emit VoteCast(account, proposalId, support, weight, reason);\\n\\n        return weight;\\n    }\\n\\n    /**\\n     * @dev Encodes a `ProposalState` into a `bytes32` representation where each bit enabled corresponds to\\n     * the underlying position in the `ProposalState` enum. For example:\\n     *\\n     * 0x000...10000\\n     *   ^^^^^^------ ...\\n     *         ^----- Succeeded\\n     *          ^---- Defeated\\n     *           ^--- Canceled\\n     *            ^-- Active\\n     *             ^- Pending\\n     */\\n    function _encodeStateBitmap(\\n        ProposalState proposalState\\n    ) internal pure returns (bytes32) {\\n        return bytes32(1 << uint8(proposalState));\\n    }\\n}\\n\",\"keccak256\":\"0x267899077b3d275189b8a84ddc59376d21e6302156e9bf75a3576b46ebdaf454\",\"license\":\"Apache-2.0\"},\"contracts/DAO/governance/IGovernor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (governance/IGovernor.sol)\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"../../OpenZeppelin/interfaces/IERC6372.sol\\\";\\n\\n/**\\n * @dev Interface of the {Governor} core.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract IGovernor is IERC6372 {\\n    enum ProposalState {\\n        Active,\\n        Canceled,\\n        Defeated,\\n        Succeeded,\\n        Expired,\\n        Executed\\n    }\\n\\n    /**\\n     * @dev Empty proposal or a mismatch between the parameters length for a proposal call.\\n     */\\n    error GovernorInvalidProposalLength(\\n        uint256 targets,\\n        uint256 calldatas,\\n        uint256 values\\n    );\\n\\n    /**\\n     * @dev The vote was already cast.\\n     */\\n    error GovernorAlreadyCastVote(address voter);\\n\\n    /**\\n     * @dev The `account` is not a proposer.\\n     */\\n    error GovernorOnlyProposer(address account);\\n\\n    /**\\n     * @dev The `account` is not the governance executor.\\n     */\\n    error GovernorOnlyExecutor(address account);\\n\\n    /**\\n     * @dev The `proposalId` doesn't exist.\\n     */\\n    error GovernorNonexistentProposal(uint256 proposalId);\\n\\n    /**\\n     * @dev The current state of a proposal is not the required for performing an operation.\\n     * The `expectedStates` is a bitmap with the bits enabled for each ProposalState enum position\\n     * counting from right to left.\\n     *\\n     * NOTE: If `expectedState` is `bytes32(0)`, the proposal is expected to not be in any state (i.e. not exist).\\n     * This is the case when a proposal that is expected to be unset is already initiated (the proposal is duplicated).\\n     *\\n     * See {Governor-_encodeStateBitmap}.\\n     */\\n    error GovernorUnexpectedProposalState(\\n        uint256 proposalId,\\n        ProposalState current,\\n        bytes32 expectedStates\\n    );\\n\\n    /**\\n     * @dev The voting period set is not a valid period.\\n     */\\n    error GovernorInvalidVotingPeriod(uint256 votingPeriod);\\n\\n    /**\\n     * @dev Cannot cancel proposal because it has been voted on.\\n     */\\n    error GovernorProposalAlreadyVotedOn(uint256 proposalId, uint256 votes);\\n\\n    /**\\n     * @dev The vote type used is not valid for the corresponding counting module.\\n     */\\n    error GovernorInvalidVoteType();\\n\\n    /**\\n     * @dev Emitted when a proposal is created.\\n     */\\n    event ProposalCreated(\\n        uint256 proposalId,\\n        address proposer,\\n        address[] targets,\\n        uint256[] values,\\n        string[] signatures,\\n        bytes[] calldatas,\\n        uint256 voteStart,\\n        uint256 voteEnd,\\n        string description\\n    );\\n\\n    /**\\n     * @dev Emitted when a proposal is canceled.\\n     */\\n    event ProposalCanceled(uint256 proposalId);\\n\\n    /**\\n     * @dev Emitted when a proposal is executed.\\n     */\\n    event ProposalExecuted(uint256 proposalId);\\n\\n    /**\\n     * @dev Emitted when a vote.\\n     *\\n     * Note: `support` values should be seen as buckets. Their interpretation depends on the voting module used.\\n     */\\n    event VoteCast(\\n        address indexed voter,\\n        uint256 proposalId,\\n        uint8 support,\\n        uint256 weight,\\n        string reason\\n    );\\n\\n    /**\\n     * @notice module:core\\n     * @dev Name of the governor instance.\\n     */\\n    function name() public view virtual returns (string memory);\\n\\n    /**\\n     * @notice module:core\\n     * @dev See {IERC6372}\\n     */\\n    function clock() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev See EIP-6372.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function CLOCK_MODE() public view virtual returns (string memory);\\n\\n    /**\\n     * @notice module:voting\\n     * @dev A description of the possible `support` values for {castVote} and the way these votes are counted, meant to\\n     * be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of\\n     * key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`.\\n     *\\n     * There are 2 standard keys: `support` and `quorum`.\\n     *\\n     * - `support=bravo` refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in `GovernorBravo`.\\n     * - `quorum=bravo` means that only For votes are counted towards quorum.\\n     * - `quorum=for,abstain` means that both For and Abstain votes are counted towards quorum.\\n     *\\n     * If a counting module makes use of encoded `params`, it should  include this under a `params` key with a unique\\n     * name that describes the behavior. For example:\\n     *\\n     * - `params=fractional` might refer to a scheme where votes are divided fractionally between for/against/abstain.\\n     * - `params=erc721` might refer to a scheme where specific NFTs are delegated to vote.\\n     *\\n     * NOTE: The string can be decoded by the standard\\n     * https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[`URLSearchParams`]\\n     * JavaScript class.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function COUNTING_MODE() public view virtual returns (string memory);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Hashing function used to (re)build the proposal id from the proposal details..\\n     */\\n    function hashProposal(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public pure virtual returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Current state of a proposal, following Compound's convention\\n     */\\n    function state(\\n        uint256 proposalId\\n    ) public view virtual returns (ProposalState);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Timepoint used to retrieve user's votes and quorum. If using block number (as per Compound's Comp), the\\n     * snapshot is performed at the end of this block. Hence, voting for this proposal starts at the beginning of the\\n     * following block.\\n     */\\n    function proposalSnapshot(\\n        uint256 proposalId\\n    ) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Timepoint at which votes close. If using block number, votes close at the end of this block, so it is\\n     * possible to cast a vote during this block.\\n     */\\n    function proposalDeadline(\\n        uint256 proposalId\\n    ) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev The account that created a proposal.\\n     */\\n    function proposalProposer(\\n        uint256 proposalId\\n    ) public view virtual returns (address);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Delay between the vote start and vote end. The unit this duration is expressed in depends on the clock\\n     * (see EIP-6372) this contract uses.\\n     *\\n     * NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting\\n     * duration compared to the voting delay.\\n     */\\n    function votingPeriod() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Minimum number of cast voted required for a proposal to be successful.\\n     */\\n    function quorum() public view virtual returns (uint8);\\n\\n    /**\\n     * @notice module:reputation\\n     * @dev Voting power of an `account`.\\n     *\\n     * Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or\\n     * multiple), {ERC20Votes} tokens.\\n     */\\n    function getVotes(address account) public view virtual returns (uint8);\\n\\n    /**\\n     * @notice module:voting\\n     * @dev Returns whether `account` has cast a vote on `proposalId`.\\n     */\\n    function hasVoted(\\n        uint256 proposalId,\\n        address account\\n    ) public view virtual returns (bool);\\n\\n    /**\\n     * @notice module:voting\\n     * @dev Total votes for proposal `proposalId`.\\n     */\\n    function getProposalVotesCount(\\n        uint256 proposalId\\n    ) public view virtual returns (uint256);\\n\\n    /**\\n     * @dev Create a new proposal. Vote start after a delay specified by {IGovernor-votingDelay} and lasts for a\\n     * duration specified by {IGovernor-votingPeriod}.\\n     *\\n     * Emits a {ProposalCreated} event.\\n     */\\n    function propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) public virtual returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Execute a successful proposal. This requires the quorum to be reached, the vote to be successful, and the\\n     * deadline to be reached.\\n     *\\n     * Emits a {ProposalExecuted} event.\\n     *\\n     * Note: some module can modify the requirements for execution, for example by adding an additional timelock.\\n     */\\n    function execute(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public payable virtual returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Cancel a proposal. A proposal is cancellable by the proposer but only before it has got any votes.\\n     *\\n     * Emits a {ProposalCanceled} event.\\n     */\\n    function cancel(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public virtual returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Cast a vote\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVote(\\n        uint256 proposalId,\\n        uint8 support\\n    ) public virtual returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote with a reason\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVoteWithReason(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason\\n    ) public virtual returns (uint256 balance);\\n}\\n\",\"keccak256\":\"0x2897d3aaf0fcc1f2227a01c684636bff59fed0ca0da6ce502dd7e59b7c9f980a\",\"license\":\"MIT\"},\"contracts/DAO/governance/extensions/GovernorCountingSimple.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (governance/extensions/GovernorCountingSimple.sol)\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"../Governor.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} for simple, 3 options, vote counting.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract GovernorCountingSimple is Governor {\\n    /**\\n     * @dev Supported vote types. Matches Governor Bravo ordering.\\n     */\\n    enum VoteType {\\n        Against,\\n        For,\\n        Abstain\\n    }\\n\\n    struct ProposalVote {\\n        uint256 againstVotes;\\n        uint256 forVotes;\\n        uint256 abstainVotes;\\n        mapping(address => bool) hasVoted;\\n    }\\n\\n    mapping(uint256 => ProposalVote) private _proposalVotes;\\n\\n    /**\\n     * @dev See {IGovernor-COUNTING_MODE}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function COUNTING_MODE()\\n        public\\n        pure\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        return \\\"support=bravo&quorum=for|agains\\\";\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-hasVoted}.\\n     */\\n    function hasVoted(\\n        uint256 proposalId,\\n        address account\\n    ) public view virtual override returns (bool) {\\n        return _proposalVotes[proposalId].hasVoted[account];\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-getProposalVotesCount}.\\n     */\\n    function getProposalVotesCount(\\n        uint256 proposalId\\n    ) public view virtual override returns (uint256) {\\n        (\\n            uint256 againstVotes,\\n            uint256 forVotes,\\n            uint256 abstainVotes\\n        ) = proposalVotes(proposalId);\\n        return againstVotes + forVotes + abstainVotes;\\n    }\\n\\n    /**\\n     * @dev Accessor to the internal vote counts.\\n     */\\n    function proposalVotes(\\n        uint256 proposalId\\n    )\\n        public\\n        view\\n        virtual\\n        returns (uint256 againstVotes, uint256 forVotes, uint256 abstainVotes)\\n    {\\n        ProposalVote storage proposalVote = _proposalVotes[proposalId];\\n        return (\\n            proposalVote.againstVotes,\\n            proposalVote.forVotes,\\n            proposalVote.abstainVotes\\n        );\\n    }\\n\\n    /**\\n     * @dev See {Governor-_quorumReached}.\\n     * In this module, the quorum is reached when there are enough FOR or AGAINST votes to meet the quorum\\n     */\\n    function _quorumReached(\\n        uint256 proposalId\\n    ) internal view virtual override returns (bool) {\\n        ProposalVote storage proposalVote = _proposalVotes[proposalId];\\n\\n        return\\n            quorum() <= proposalVote.forVotes ||\\n            quorum() <= proposalVote.againstVotes;\\n    }\\n\\n    /**\\n     * @dev See {Governor-_voteSucceeded}. In this module, the forVotes must be strictly over the againstVotes.\\n     */\\n    function _voteSucceeded(\\n        uint256 proposalId\\n    ) internal view virtual override returns (bool) {\\n        ProposalVote storage proposalVote = _proposalVotes[proposalId];\\n\\n        return proposalVote.forVotes > proposalVote.againstVotes;\\n    }\\n\\n    /**\\n     * @dev See {Governor-_countVote}. In this module, the support follows the `VoteType` enum (from Governor Bravo).\\n     */\\n    function _countVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        uint256 weight\\n    ) internal virtual override {\\n        ProposalVote storage proposalVote = _proposalVotes[proposalId];\\n\\n        if (proposalVote.hasVoted[account]) {\\n            revert GovernorAlreadyCastVote(account);\\n        }\\n        proposalVote.hasVoted[account] = true;\\n\\n        if (support == uint8(VoteType.Against)) {\\n            proposalVote.againstVotes += weight;\\n        } else if (support == uint8(VoteType.For)) {\\n            proposalVote.forVotes += weight;\\n        } else if (support == uint8(VoteType.Abstain)) {\\n            proposalVote.abstainVotes += weight;\\n        } else {\\n            revert GovernorInvalidVoteType();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x501da582073fbc37a231ed8bc6c3e5dd56428c556eb55145193c49e408eb23c8\",\"license\":\"MIT\"},\"contracts/DAO/governance/extensions/GovernorExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n// Based on Openzeppelin Contracts (last updated v4.9.0)\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"../../IExecutor.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} that binds the execution process to an instance of {Executer}.\\n *\\n * Using this model means the proposal will be operated by the {Executor} and not by the {Governor}. Thus,\\n * the assets and permissions must be attached to the {Executor}\\n */\\nabstract contract GovernorExecutor {\\n    IExecutor private _executorContract;\\n\\n    // Type declarations\\n    // State variables\\n    // Events\\n    /**\\n     * @dev Emitted when the executor used for proposal execution is modified.\\n     */\\n    event ExecutorChange(address oldExecutor, address newExecutor);\\n\\n    // Errors\\n    // Modifiers\\n    // Functions\\n    //* constructor\\n\\n    /**\\n     * @dev Set the executor.\\n     */\\n    constructor(IExecutor executorAddress) {\\n        _executorContract = executorAddress;\\n    }\\n\\n    //* receive function\\n    //* fallback function (if exists)\\n    //* external\\n    //* public\\n    //* internal\\n\\n    /**\\n     * @dev Address through which the governor executes action. In this case, the timelock.\\n     */\\n    function _executor() internal view virtual returns (address) {\\n        return address(_executorContract);\\n    }\\n\\n    /**\\n     * @dev Execute function that run the ready proposal through the executor.\\n     */\\n    function _execute(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) internal virtual {\\n        // execute\\n        _executorContract.executeBatch{value: msg.value}(\\n            targets,\\n            values,\\n            calldatas,\\n            descriptionHash\\n        );\\n    }\\n\\n    /**\\n     * @dev Update executor contract address.\\n     */\\n    function _updateExecutor(IExecutor newExecutor) internal {\\n        emit ExecutorChange(address(_executorContract), address(newExecutor));\\n        _executorContract = newExecutor;\\n    }\\n\\n    //* private\\n    //* asserts\\n}\\n\",\"keccak256\":\"0x4dd83d2bf452783cf1eeb90b7cc2b8c8410819ee02f0b32c31f6a77eba381a4e\",\"license\":\"Apache-2.0\"},\"contracts/DAO/governance/extensions/GovernorSettings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (governance/extensions/GovernorSettings.sol)\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"../Governor.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} for settings updatable through governance.\\n *\\n * _Available since v4.4._\\n */\\nabstract contract GovernorSettings is Governor {\\n    uint256 private _votingPeriod;\\n\\n    event VotingPeriodSet(uint256 oldVotingPeriod, uint256 newVotingPeriod);\\n\\n    /**\\n     * @dev Initialize the governance parameters.\\n     */\\n    constructor(uint256 initialVotingPeriod) {\\n        _setVotingPeriod(initialVotingPeriod);\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-votingPeriod}.\\n     */\\n    function votingPeriod() public view virtual override returns (uint256) {\\n        return _votingPeriod;\\n    }\\n\\n    /**\\n     * @dev Update the voting period. This operation can only be performed through a governance proposal.\\n     *\\n     * Emits a {VotingPeriodSet} event.\\n     */\\n    function setVotingPeriod(\\n        uint256 newVotingPeriod\\n    ) public virtual onlyGovernance {\\n        _setVotingPeriod(newVotingPeriod);\\n    }\\n\\n    /**\\n     * @dev Internal setter for the voting period.\\n     *\\n     * Emits a {VotingPeriodSet} event.\\n     */\\n    function _setVotingPeriod(uint256 newVotingPeriod) internal virtual {\\n        // voting period must be at least one block long\\n        if (newVotingPeriod == 0) {\\n            revert GovernorInvalidVotingPeriod(0);\\n        }\\n        emit VotingPeriodSet(_votingPeriod, newVotingPeriod);\\n        _votingPeriod = newVotingPeriod;\\n    }\\n}\\n\",\"keccak256\":\"0xeb227ae0d256e7483959349fc456e47e25c7e9f042066f509126bf05f786167d\",\"license\":\"MIT\"},\"contracts/DAO/governance/extensions/GovernorVotes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (governance/extensions/GovernorVotes.sol)\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"../Governor.sol\\\";\\nimport \\\"../../IUserRegistry.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} for voting weight extraction from an {ERC20Votes} token, or since v4.5 an {ERC721Votes} token.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract GovernorVotes is Governor {\\n    IUserRegistry public userRegistry;\\n\\n    event UserRegistryUpdated(\\n        IUserRegistry oldUserRegistry,\\n        IUserRegistry newUserRegistry\\n    );\\n\\n    constructor(IUserRegistry userRegistryAddress) {\\n        userRegistry = userRegistryAddress;\\n    }\\n\\n    /**\\n     * @dev Clock (as specified in EIP-6372) is set to timestamp..\\n     */\\n    function clock() public view virtual override returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Machine-readable description of the clock as specified in EIP-6372.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function CLOCK_MODE() public view virtual override returns (string memory) {\\n        return \\\"mode=timestamp\\\";\\n    }\\n\\n    /**\\n     * @dev Read the voting weight from the User Registry (see {Governor-_getVotes}).\\n     */\\n    function _getVotes(\\n        address account\\n    ) internal view virtual override returns (uint8) {\\n        return userRegistry.getVotes(account);\\n    }\\n\\n    /**\\n     * @dev Update the user registry address.\\n     *\\n     * Emits a {UserRegistryUpdated} event.\\n     */\\n    function _setUserRegistry(\\n        IUserRegistry newUserRegistryAddress\\n    ) internal virtual onlyGovernance {\\n        emit UserRegistryUpdated(userRegistry, newUserRegistryAddress);\\n        userRegistry = newUserRegistryAddress;\\n    }\\n}\\n\",\"keccak256\":\"0xbe9faf0acf3dfa5545e6a9a2bc882f394e43f2a76339385c54356a6180f93b45\",\"license\":\"MIT\"},\"contracts/OpenZeppelin/interfaces/IERC6372.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC6372.sol)\\n\\npragma solidity ^0.8.19;\\n\\ninterface IERC6372 {\\n    /**\\n     * @dev Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting).\\n     */\\n    function clock() external view returns (uint256);\\n\\n    /**\\n     * @dev Description of the clock\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function CLOCK_MODE() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xc63ff1f8572f68b3f9f4b5c4823b566041b5abed114b44e5b45d54881deb23c5\",\"license\":\"MIT\"},\"contracts/OpenZeppelin/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.19;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, defaultRevert);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with a\\n     * `customRevert` function as a fallback when `target` reverts.\\n     *\\n     * Requirements:\\n     *\\n     * - `customRevert` must be a reverting function.\\n     *\\n     * _Available since v5.0._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        function() internal view customRevert\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, customRevert);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, defaultRevert);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with a `customRevert` function as a fallback revert reason when `target` reverts.\\n     *\\n     * Requirements:\\n     *\\n     * - `customRevert` must be a reverting function.\\n     *\\n     * _Available since v5.0._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        function() internal view customRevert\\n    ) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, customRevert);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, defaultRevert);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        function() internal view customRevert\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, customRevert);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, defaultRevert);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        function() internal view customRevert\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, customRevert);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided `customRevert`) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v5.0._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        function() internal view customRevert\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check if target is a contract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                if (target.code.length == 0) {\\n                    revert AddressEmptyCode(target);\\n                }\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, customRevert);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or with a default revert error.\\n     *\\n     * _Available since v5.0._\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal view returns (bytes memory) {\\n        return verifyCallResult(success, returndata, defaultRevert);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-verifyCallResult-bool-bytes-}[`verifyCallResult`], but with a\\n     * `customRevert` function as a fallback when `success` is `false`.\\n     *\\n     * Requirements:\\n     *\\n     * - `customRevert` must be a reverting function.\\n     *\\n     * _Available since v5.0._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        function() internal view customRevert\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, customRevert);\\n        }\\n    }\\n\\n    /**\\n     * @dev Default reverting function when no `customRevert` is provided in a function call.\\n     */\\n    function defaultRevert() internal pure {\\n        revert FailedInnerCall();\\n    }\\n\\n    function _revert(bytes memory returndata, function() internal view customRevert) private view {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            customRevert();\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67ca7745e6032aeda339ba3f5813abf9eeb4ec683520944fa878c2867aea58f1\",\"license\":\"MIT\"},\"contracts/OpenZeppelin/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.19;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xa388010ee61dd57f063e52ce42f0e2f4fec5d02e60b06fe5ad2aa1497086fd64\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001e7738038062001e77833981016040819052620000349162000144565b60408051808201909152600981526854726163657244414f60b81b6020820152600080546001600160a01b0319166001600160a01b0386161790558290829085600162000082838262000231565b5050506200009681620000c160201b60201c565b50600580546001600160a01b0319166001600160a01b039290921691909117905550620002fd915050565b80600003620000ea5760405163f1cfbf0560e01b81526000600482015260240160405180910390fd5b60035460408051918252602082018390527f7e3f7f0708a84de9203036abaa450dccc85ad5ff52f78c170f3edb55cf5e8828910160405180910390a1600355565b6001600160a01b03811681146200014157600080fd5b50565b6000806000606084860312156200015a57600080fd5b835162000167816200012b565b60208501519093506200017a816200012b565b80925050604084015190509250925092565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620001b757607f821691505b602082108103620001d857634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200022c57600081815260208120601f850160051c81016020861015620002075750805b601f850160051c820191505b81811015620002285782815560010162000213565b5050505b505050565b81516001600160401b038111156200024d576200024d6200018c565b62000265816200025e8454620001a2565b84620001de565b602080601f8311600181146200029d5760008415620002845750858301515b600019600386901b1c1916600185901b17855562000228565b600085815260208120601f198616915b82811015620002ce57888601518255948401946001909101908401620002ad565b5085821015620002ed5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b611b6a806200030d6000396000f3fe6080604052600436106101755760003560e01c806356781388116100cb5780639ab24eb01161007f578063c59057e411610059578063c59057e4146104af578063dd4e2ba5146104cf578063ea0217cf1461051557600080fd5b80639ab24eb014610435578063bc597d9f14610455578063c01f9e371461047557600080fd5b80637b3c71d3116100b05780637b3c71d3146103e25780637d5e81e21461040257806391ddadf41461042257600080fd5b806356781388146103a25780635c7460d6146103c257600080fd5b80632d63f6931161012d578063452115d611610107578063452115d6146102e75780634bf5d7e914610307578063544ffc9c1461034d57600080fd5b80632d63f693146102535780633e4f49e61461028a57806343859632146102b757600080fd5b8063143489d01161015e578063143489d0146101c45780631703a0181461021e5780632656227d1461024057600080fd5b806302a251a31461017a57806306fdde03146101a2575b600080fd5b34801561018657600080fd5b5061018f610537565b6040519081526020015b60405180910390f35b3480156101ae57600080fd5b506101b7610547565b604051610199919061124c565b3480156101d057600080fd5b506102066101df36600461125f565b6000908152600260205260409020546801000000000000000090046001600160a01b031690565b6040516001600160a01b039091168152602001610199565b34801561022a57600080fd5b5060195b60405160ff9091168152602001610199565b61018f61024e3660046114b9565b6105d9565b34801561025f57600080fd5b5061018f61026e36600461125f565b60009081526002602052604090205467ffffffffffffffff1690565b34801561029657600080fd5b506102aa6102a536600461125f565b6106bd565b6040516101999190611581565b3480156102c357600080fd5b506102d76102d236600461158f565b6107e6565b6040519015158152602001610199565b3480156102f357600080fd5b5061018f6103023660046114b9565b610816565b34801561031357600080fd5b5060408051808201909152600e81527f6d6f64653d74696d657374616d7000000000000000000000000000000000000060208201526101b7565b34801561035957600080fd5b5061038761036836600461125f565b6000908152600460205260409020805460018201546002909201549092565b60408051938452602084019290925290820152606001610199565b3480156103ae57600080fd5b5061018f6103bd3660046115ca565b6108fd565b3480156103ce57600080fd5b50600554610206906001600160a01b031681565b3480156103ee57600080fd5b5061018f6103fd3660046115fa565b610926565b34801561040e57600080fd5b5061018f61041d366004611683565b610978565b34801561042e57600080fd5b504261018f565b34801561044157600080fd5b5061022e610450366004611744565b610c04565b34801561046157600080fd5b5061018f61047036600461125f565b610c0f565b34801561048157600080fd5b5061018f61049036600461125f565b60009081526002602052604090206001015467ffffffffffffffff1690565b3480156104bb57600080fd5b5061018f6104ca3660046114b9565b610c5d565b3480156104db57600080fd5b5060408051808201909152601f81527f737570706f72743d627261766f2671756f72756d3d666f727c616761696e730060208201526101b7565b34801561052157600080fd5b5061053561053036600461125f565b610c97565b005b600061054260035490565b905090565b6060600180546105569061175f565b80601f01602080910402602001604051908101604052809291908181526020018280546105829061175f565b80156105cf5780601f106105a4576101008083540402835291602001916105cf565b820191906000526020600020905b8154815290600101906020018083116105b257829003601f168201915b5050505050905090565b6000806105e886868686610c5d565b905060006105f5826106bd565b9050600381600581111561060b5761060b611549565b1461064157818161061c6003610cf8565b6040516331b75e4d60e01b815260040161063893929190611799565b60405180910390fd5b60008281526002602052604090819020600101805468ff0000000000000000191668010000000000000000179055517f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f9061069f9084815260200190565b60405180910390a16106b387878787610d1b565b5095945050505050565b6000818152600260205260408120600181015468010000000000000000900460ff16156106ed5750600592915050565b60018101546901000000000000000000900460ff16156107105750600192915050565b60008381526002602052604081205467ffffffffffffffff1690819003610766576040517f6ad0607500000000000000000000000000000000000000000000000000000000815260048101859052602401610638565b600084815260026020526040902060010154429067ffffffffffffffff16818110156107985750600495945050505050565b6107a186610da4565b156107da576000868152600460205260409020805460019091015411156107ce5750600395945050505050565b50600295945050505050565b50600095945050505050565b60008281526004602090815260408083206001600160a01b038516845260030190915290205460ff165b92915050565b60008061082586868686610c5d565b9050600061083282610c0f565b90508015610876576040517ffe4328ad0000000000000000000000000000000000000000000000000000000081526004810183905260248101829052604401610638565b6000828152600260205260409020546801000000000000000090046001600160a01b03166001600160a01b0316336001600160a01b0316146108e6576040517f233d98e3000000000000000000000000000000000000000000000000000000008152336004820152602401610638565b6108f287878787610dcf565b979650505050505050565b60008033905061091e84828560405180602001604052806000815250610eda565b949350505050565b60008033905061096e86828787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610eda92505050565b9695505050505050565b6000338142905060006109948888888880519060200120610c5d565b9050865188511415806109a957508551885114155b806109b357508751155b15610a01578751865188516040517f447b05d0000000000000000000000000000000000000000000000000000000008152600481019390935260248301919091526044820152606401610638565b60008181526002602052604090205467ffffffffffffffff1615610a475780610a29826106bd565b6040516331b75e4d60e01b8152610638929190600090600401611799565b6000610a51610537565b610a5b90846117d1565b90506040518060a00160405280610a7185610f7a565b67ffffffffffffffff168152602001856001600160a01b03168152602001610a9883610f7a565b67ffffffffffffffff9081168252600060208084018290526040938401829052868252600281529083902084518154928601519084167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217680100000000000000006001600160a01b0390931683021781559284015160019093018054606086015160809096015194841668ffffffffffffffffff19909116179415159091029390931769ff00000000000000000019166901000000000000000000921515929092029190911790915589517f7d84a6263ae0d98d3329bd7b46bb4e8d6f98cd35a7adb45c274c8b7fd5ebd5e091849187918d918d91811115610ba357610ba3611278565b604051908082528060200260200182016040528015610bd657816020015b6060815260200190600190039081610bc15790505b508c89888e604051610bf0999897969594939291906118ad565b60405180910390a150979650505050505050565b600061081082610fce565b600080600080610c38856000908152600460205260409020805460018201546002909201549092565b9194509250905080610c4a83856117d1565b610c5491906117d1565b95945050505050565b600084848484604051602001610c769493929190611985565b60408051601f19818403018152919052805160209091012095945050505050565b33610caa6000546001600160a01b031690565b6001600160a01b031614610cec576040517f47096e47000000000000000000000000000000000000000000000000000000008152336004820152602401610638565b610cf581611056565b50565b6000816005811115610d0c57610d0c611549565b600160ff919091161b92915050565b6000546040517fa6cc2c8c0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063a6cc2c8c903490610d6c908890889088908890600401611985565b6000604051808303818588803b158015610d8557600080fd5b505af1158015610d99573d6000803e3d6000fd5b505050505050505050565b600081815260046020526040812060018101546019111580610dc857508054601911155b9392505050565b600080610dde86868686610c5d565b90506000610deb826106bd565b90506000610df96005610cf8565b610e036004610cf8565b610e0d6001610cf8565b17179050610e1a82610cf8565b811615610e66578282826001610e316005826119d0565b610e3c906002611acd565b610e469190611adc565b60001b186040516331b75e4d60e01b815260040161063893929190611799565b60008381526002602052604090819020600101805469ff00000000000000000019166901000000000000000000179055517f789cf55be980739dad1d0699b93b58e806b51c9d96619bfa8fe0a28abaa7b30c90610ec69085815260200190565b60405180910390a150909695505050505050565b600080610ee6866106bd565b90506000816005811115610efc57610efc611549565b14610f0d57858161061c6000610cf8565b6000610f1886610fce565b60ff169050610f29878787846110d4565b856001600160a01b03167fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda488878488604051610f689493929190611aef565b60405180910390a29695505050505050565b600067ffffffffffffffff821115610fca57604080517f6dfcc650000000000000000000000000000000000000000000000000000000008152600481019190915260248101839052604401610638565b5090565b6005546040517f9ab24eb00000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301526000921690639ab24eb090602401602060405180830381865afa158015611032573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108109190611b17565b80600003611093576040517ff1cfbf0500000000000000000000000000000000000000000000000000000000815260006004820152602401610638565b60035460408051918252602082018390527f7e3f7f0708a84de9203036abaa450dccc85ad5ff52f78c170f3edb55cf5e8828910160405180910390a1600355565b60008481526004602090815260408083206001600160a01b0387168452600381019092529091205460ff1615611141576040517f71c6af490000000000000000000000000000000000000000000000000000000081526001600160a01b0385166004820152602401610638565b6001600160a01b03841660009081526003820160205260409020805460ff1916600117905560ff831661118d578181600001600082825461118291906117d1565b909155506111ff9050565b60001960ff8416016111ad578181600101600082825461118291906117d1565b60011960ff8416016111cd578181600201600082825461118291906117d1565b6040517f06b337c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b6000815180845260005b8181101561122c57602081850181015186830182015201611210565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610dc86020830184611206565b60006020828403121561127157600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156112b7576112b7611278565b604052919050565b600067ffffffffffffffff8211156112d9576112d9611278565b5060051b60200190565b80356001600160a01b03811681146112fa57600080fd5b919050565b600082601f83011261131057600080fd5b81356020611325611320836112bf565b61128e565b82815260059290921b8401810191818101908684111561134457600080fd5b8286015b8481101561136657611359816112e3565b8352918301918301611348565b509695505050505050565b600082601f83011261138257600080fd5b81356020611392611320836112bf565b82815260059290921b840181019181810190868411156113b157600080fd5b8286015b8481101561136657803583529183019183016113b5565b600067ffffffffffffffff8311156113e6576113e6611278565b6113f9601f8401601f191660200161128e565b905082815283838301111561140d57600080fd5b828260208301376000602084830101529392505050565b600082601f83011261143557600080fd5b81356020611445611320836112bf565b82815260059290921b8401810191818101908684111561146457600080fd5b8286015b8481101561136657803567ffffffffffffffff8111156114885760008081fd5b8701603f8101891361149a5760008081fd5b6114ab8986830135604084016113cc565b845250918301918301611468565b600080600080608085870312156114cf57600080fd5b843567ffffffffffffffff808211156114e757600080fd5b6114f3888389016112ff565b9550602087013591508082111561150957600080fd5b61151588838901611371565b9450604087013591508082111561152b57600080fd5b5061153887828801611424565b949793965093946060013593505050565b634e487b7160e01b600052602160045260246000fd5b6006811061157d57634e487b7160e01b600052602160045260246000fd5b9052565b60208101610810828461155f565b600080604083850312156115a257600080fd5b823591506115b2602084016112e3565b90509250929050565b60ff81168114610cf557600080fd5b600080604083850312156115dd57600080fd5b8235915060208301356115ef816115bb565b809150509250929050565b6000806000806060858703121561161057600080fd5b843593506020850135611622816115bb565b9250604085013567ffffffffffffffff8082111561163f57600080fd5b818701915087601f83011261165357600080fd5b81358181111561166257600080fd5b88602082850101111561167457600080fd5b95989497505060200194505050565b6000806000806080858703121561169957600080fd5b843567ffffffffffffffff808211156116b157600080fd5b6116bd888389016112ff565b955060208701359150808211156116d357600080fd5b6116df88838901611371565b945060408701359150808211156116f557600080fd5b61170188838901611424565b9350606087013591508082111561171757600080fd5b508501601f8101871361172957600080fd5b611738878235602084016113cc565b91505092959194509250565b60006020828403121561175657600080fd5b610dc8826112e3565b600181811c9082168061177357607f821691505b60208210810361179357634e487b7160e01b600052602260045260246000fd5b50919050565b838152606081016117ad602083018561155f565b826040830152949350505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610810576108106117bb565b600081518084526020808501945080840160005b8381101561181d5781516001600160a01b0316875295820195908201906001016117f8565b509495945050505050565b600081518084526020808501945080840160005b8381101561181d5781518752958201959082019060010161183c565b600081518084526020808501808196508360051b8101915082860160005b858110156118a057828403895261188e848351611206565b98850198935090840190600101611876565b5091979650505050505050565b60006101208b835260206001600160a01b038c16818501528160408501526118d78285018c6117e4565b915083820360608501526118eb828b611828565b915083820360808501528189518084528284019150828160051b850101838c0160005b8381101561193c57601f1987840301855261192a838351611206565b9486019492509085019060010161190e565b505086810360a0880152611950818c611858565b9450505050508560c08401528460e08401528281036101008401526119758185611206565b9c9b505050505050505050505050565b60808152600061199860808301876117e4565b82810360208401526119aa8187611828565b905082810360408401526119be8186611858565b91505082606083015295945050505050565b60ff8181168382160190811115610810576108106117bb565b600181815b80851115611a24578160001904821115611a0a57611a0a6117bb565b80851615611a1757918102915b93841c93908002906119ee565b509250929050565b600082611a3b57506001610810565b81611a4857506000610810565b8160018114611a5e5760028114611a6857611a84565b6001915050610810565b60ff841115611a7957611a796117bb565b50506001821b610810565b5060208310610133831016604e8410600b8410161715611aa7575081810a610810565b611ab183836119e9565b8060001904821115611ac557611ac56117bb565b029392505050565b6000610dc860ff841683611a2c565b81810381811115610810576108106117bb565b84815260ff8416602082015282604082015260806060820152600061096e6080830184611206565b600060208284031215611b2957600080fd5b8151610dc8816115bb56fea264697066735822122076107849c38d4bf4a66dee545eaa3914d0ae13f735114f606820401a26ebc85564736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106101755760003560e01c806356781388116100cb5780639ab24eb01161007f578063c59057e411610059578063c59057e4146104af578063dd4e2ba5146104cf578063ea0217cf1461051557600080fd5b80639ab24eb014610435578063bc597d9f14610455578063c01f9e371461047557600080fd5b80637b3c71d3116100b05780637b3c71d3146103e25780637d5e81e21461040257806391ddadf41461042257600080fd5b806356781388146103a25780635c7460d6146103c257600080fd5b80632d63f6931161012d578063452115d611610107578063452115d6146102e75780634bf5d7e914610307578063544ffc9c1461034d57600080fd5b80632d63f693146102535780633e4f49e61461028a57806343859632146102b757600080fd5b8063143489d01161015e578063143489d0146101c45780631703a0181461021e5780632656227d1461024057600080fd5b806302a251a31461017a57806306fdde03146101a2575b600080fd5b34801561018657600080fd5b5061018f610537565b6040519081526020015b60405180910390f35b3480156101ae57600080fd5b506101b7610547565b604051610199919061124c565b3480156101d057600080fd5b506102066101df36600461125f565b6000908152600260205260409020546801000000000000000090046001600160a01b031690565b6040516001600160a01b039091168152602001610199565b34801561022a57600080fd5b5060195b60405160ff9091168152602001610199565b61018f61024e3660046114b9565b6105d9565b34801561025f57600080fd5b5061018f61026e36600461125f565b60009081526002602052604090205467ffffffffffffffff1690565b34801561029657600080fd5b506102aa6102a536600461125f565b6106bd565b6040516101999190611581565b3480156102c357600080fd5b506102d76102d236600461158f565b6107e6565b6040519015158152602001610199565b3480156102f357600080fd5b5061018f6103023660046114b9565b610816565b34801561031357600080fd5b5060408051808201909152600e81527f6d6f64653d74696d657374616d7000000000000000000000000000000000000060208201526101b7565b34801561035957600080fd5b5061038761036836600461125f565b6000908152600460205260409020805460018201546002909201549092565b60408051938452602084019290925290820152606001610199565b3480156103ae57600080fd5b5061018f6103bd3660046115ca565b6108fd565b3480156103ce57600080fd5b50600554610206906001600160a01b031681565b3480156103ee57600080fd5b5061018f6103fd3660046115fa565b610926565b34801561040e57600080fd5b5061018f61041d366004611683565b610978565b34801561042e57600080fd5b504261018f565b34801561044157600080fd5b5061022e610450366004611744565b610c04565b34801561046157600080fd5b5061018f61047036600461125f565b610c0f565b34801561048157600080fd5b5061018f61049036600461125f565b60009081526002602052604090206001015467ffffffffffffffff1690565b3480156104bb57600080fd5b5061018f6104ca3660046114b9565b610c5d565b3480156104db57600080fd5b5060408051808201909152601f81527f737570706f72743d627261766f2671756f72756d3d666f727c616761696e730060208201526101b7565b34801561052157600080fd5b5061053561053036600461125f565b610c97565b005b600061054260035490565b905090565b6060600180546105569061175f565b80601f01602080910402602001604051908101604052809291908181526020018280546105829061175f565b80156105cf5780601f106105a4576101008083540402835291602001916105cf565b820191906000526020600020905b8154815290600101906020018083116105b257829003601f168201915b5050505050905090565b6000806105e886868686610c5d565b905060006105f5826106bd565b9050600381600581111561060b5761060b611549565b1461064157818161061c6003610cf8565b6040516331b75e4d60e01b815260040161063893929190611799565b60405180910390fd5b60008281526002602052604090819020600101805468ff0000000000000000191668010000000000000000179055517f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f9061069f9084815260200190565b60405180910390a16106b387878787610d1b565b5095945050505050565b6000818152600260205260408120600181015468010000000000000000900460ff16156106ed5750600592915050565b60018101546901000000000000000000900460ff16156107105750600192915050565b60008381526002602052604081205467ffffffffffffffff1690819003610766576040517f6ad0607500000000000000000000000000000000000000000000000000000000815260048101859052602401610638565b600084815260026020526040902060010154429067ffffffffffffffff16818110156107985750600495945050505050565b6107a186610da4565b156107da576000868152600460205260409020805460019091015411156107ce5750600395945050505050565b50600295945050505050565b50600095945050505050565b60008281526004602090815260408083206001600160a01b038516845260030190915290205460ff165b92915050565b60008061082586868686610c5d565b9050600061083282610c0f565b90508015610876576040517ffe4328ad0000000000000000000000000000000000000000000000000000000081526004810183905260248101829052604401610638565b6000828152600260205260409020546801000000000000000090046001600160a01b03166001600160a01b0316336001600160a01b0316146108e6576040517f233d98e3000000000000000000000000000000000000000000000000000000008152336004820152602401610638565b6108f287878787610dcf565b979650505050505050565b60008033905061091e84828560405180602001604052806000815250610eda565b949350505050565b60008033905061096e86828787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610eda92505050565b9695505050505050565b6000338142905060006109948888888880519060200120610c5d565b9050865188511415806109a957508551885114155b806109b357508751155b15610a01578751865188516040517f447b05d0000000000000000000000000000000000000000000000000000000008152600481019390935260248301919091526044820152606401610638565b60008181526002602052604090205467ffffffffffffffff1615610a475780610a29826106bd565b6040516331b75e4d60e01b8152610638929190600090600401611799565b6000610a51610537565b610a5b90846117d1565b90506040518060a00160405280610a7185610f7a565b67ffffffffffffffff168152602001856001600160a01b03168152602001610a9883610f7a565b67ffffffffffffffff9081168252600060208084018290526040938401829052868252600281529083902084518154928601519084167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217680100000000000000006001600160a01b0390931683021781559284015160019093018054606086015160809096015194841668ffffffffffffffffff19909116179415159091029390931769ff00000000000000000019166901000000000000000000921515929092029190911790915589517f7d84a6263ae0d98d3329bd7b46bb4e8d6f98cd35a7adb45c274c8b7fd5ebd5e091849187918d918d91811115610ba357610ba3611278565b604051908082528060200260200182016040528015610bd657816020015b6060815260200190600190039081610bc15790505b508c89888e604051610bf0999897969594939291906118ad565b60405180910390a150979650505050505050565b600061081082610fce565b600080600080610c38856000908152600460205260409020805460018201546002909201549092565b9194509250905080610c4a83856117d1565b610c5491906117d1565b95945050505050565b600084848484604051602001610c769493929190611985565b60408051601f19818403018152919052805160209091012095945050505050565b33610caa6000546001600160a01b031690565b6001600160a01b031614610cec576040517f47096e47000000000000000000000000000000000000000000000000000000008152336004820152602401610638565b610cf581611056565b50565b6000816005811115610d0c57610d0c611549565b600160ff919091161b92915050565b6000546040517fa6cc2c8c0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063a6cc2c8c903490610d6c908890889088908890600401611985565b6000604051808303818588803b158015610d8557600080fd5b505af1158015610d99573d6000803e3d6000fd5b505050505050505050565b600081815260046020526040812060018101546019111580610dc857508054601911155b9392505050565b600080610dde86868686610c5d565b90506000610deb826106bd565b90506000610df96005610cf8565b610e036004610cf8565b610e0d6001610cf8565b17179050610e1a82610cf8565b811615610e66578282826001610e316005826119d0565b610e3c906002611acd565b610e469190611adc565b60001b186040516331b75e4d60e01b815260040161063893929190611799565b60008381526002602052604090819020600101805469ff00000000000000000019166901000000000000000000179055517f789cf55be980739dad1d0699b93b58e806b51c9d96619bfa8fe0a28abaa7b30c90610ec69085815260200190565b60405180910390a150909695505050505050565b600080610ee6866106bd565b90506000816005811115610efc57610efc611549565b14610f0d57858161061c6000610cf8565b6000610f1886610fce565b60ff169050610f29878787846110d4565b856001600160a01b03167fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda488878488604051610f689493929190611aef565b60405180910390a29695505050505050565b600067ffffffffffffffff821115610fca57604080517f6dfcc650000000000000000000000000000000000000000000000000000000008152600481019190915260248101839052604401610638565b5090565b6005546040517f9ab24eb00000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301526000921690639ab24eb090602401602060405180830381865afa158015611032573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108109190611b17565b80600003611093576040517ff1cfbf0500000000000000000000000000000000000000000000000000000000815260006004820152602401610638565b60035460408051918252602082018390527f7e3f7f0708a84de9203036abaa450dccc85ad5ff52f78c170f3edb55cf5e8828910160405180910390a1600355565b60008481526004602090815260408083206001600160a01b0387168452600381019092529091205460ff1615611141576040517f71c6af490000000000000000000000000000000000000000000000000000000081526001600160a01b0385166004820152602401610638565b6001600160a01b03841660009081526003820160205260409020805460ff1916600117905560ff831661118d578181600001600082825461118291906117d1565b909155506111ff9050565b60001960ff8416016111ad578181600101600082825461118291906117d1565b60011960ff8416016111cd578181600201600082825461118291906117d1565b6040517f06b337c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b6000815180845260005b8181101561122c57602081850181015186830182015201611210565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610dc86020830184611206565b60006020828403121561127157600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156112b7576112b7611278565b604052919050565b600067ffffffffffffffff8211156112d9576112d9611278565b5060051b60200190565b80356001600160a01b03811681146112fa57600080fd5b919050565b600082601f83011261131057600080fd5b81356020611325611320836112bf565b61128e565b82815260059290921b8401810191818101908684111561134457600080fd5b8286015b8481101561136657611359816112e3565b8352918301918301611348565b509695505050505050565b600082601f83011261138257600080fd5b81356020611392611320836112bf565b82815260059290921b840181019181810190868411156113b157600080fd5b8286015b8481101561136657803583529183019183016113b5565b600067ffffffffffffffff8311156113e6576113e6611278565b6113f9601f8401601f191660200161128e565b905082815283838301111561140d57600080fd5b828260208301376000602084830101529392505050565b600082601f83011261143557600080fd5b81356020611445611320836112bf565b82815260059290921b8401810191818101908684111561146457600080fd5b8286015b8481101561136657803567ffffffffffffffff8111156114885760008081fd5b8701603f8101891361149a5760008081fd5b6114ab8986830135604084016113cc565b845250918301918301611468565b600080600080608085870312156114cf57600080fd5b843567ffffffffffffffff808211156114e757600080fd5b6114f3888389016112ff565b9550602087013591508082111561150957600080fd5b61151588838901611371565b9450604087013591508082111561152b57600080fd5b5061153887828801611424565b949793965093946060013593505050565b634e487b7160e01b600052602160045260246000fd5b6006811061157d57634e487b7160e01b600052602160045260246000fd5b9052565b60208101610810828461155f565b600080604083850312156115a257600080fd5b823591506115b2602084016112e3565b90509250929050565b60ff81168114610cf557600080fd5b600080604083850312156115dd57600080fd5b8235915060208301356115ef816115bb565b809150509250929050565b6000806000806060858703121561161057600080fd5b843593506020850135611622816115bb565b9250604085013567ffffffffffffffff8082111561163f57600080fd5b818701915087601f83011261165357600080fd5b81358181111561166257600080fd5b88602082850101111561167457600080fd5b95989497505060200194505050565b6000806000806080858703121561169957600080fd5b843567ffffffffffffffff808211156116b157600080fd5b6116bd888389016112ff565b955060208701359150808211156116d357600080fd5b6116df88838901611371565b945060408701359150808211156116f557600080fd5b61170188838901611424565b9350606087013591508082111561171757600080fd5b508501601f8101871361172957600080fd5b611738878235602084016113cc565b91505092959194509250565b60006020828403121561175657600080fd5b610dc8826112e3565b600181811c9082168061177357607f821691505b60208210810361179357634e487b7160e01b600052602260045260246000fd5b50919050565b838152606081016117ad602083018561155f565b826040830152949350505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610810576108106117bb565b600081518084526020808501945080840160005b8381101561181d5781516001600160a01b0316875295820195908201906001016117f8565b509495945050505050565b600081518084526020808501945080840160005b8381101561181d5781518752958201959082019060010161183c565b600081518084526020808501808196508360051b8101915082860160005b858110156118a057828403895261188e848351611206565b98850198935090840190600101611876565b5091979650505050505050565b60006101208b835260206001600160a01b038c16818501528160408501526118d78285018c6117e4565b915083820360608501526118eb828b611828565b915083820360808501528189518084528284019150828160051b850101838c0160005b8381101561193c57601f1987840301855261192a838351611206565b9486019492509085019060010161190e565b505086810360a0880152611950818c611858565b9450505050508560c08401528460e08401528281036101008401526119758185611206565b9c9b505050505050505050505050565b60808152600061199860808301876117e4565b82810360208401526119aa8187611828565b905082810360408401526119be8186611858565b91505082606083015295945050505050565b60ff8181168382160190811115610810576108106117bb565b600181815b80851115611a24578160001904821115611a0a57611a0a6117bb565b80851615611a1757918102915b93841c93908002906119ee565b509250929050565b600082611a3b57506001610810565b81611a4857506000610810565b8160018114611a5e5760028114611a6857611a84565b6001915050610810565b60ff841115611a7957611a796117bb565b50506001821b610810565b5060208310610133831016604e8410600b8410161715611aa7575081810a610810565b611ab183836119e9565b8060001904821115611ac557611ac56117bb565b029392505050565b6000610dc860ff841683611a2c565b81810381811115610810576108106117bb565b84815260ff8416602082015282604082015260806060820152600061096e6080830184611206565b600060208284031215611b2957600080fd5b8151610dc8816115bb56fea264697066735822122076107849c38d4bf4a66dee545eaa3914d0ae13f735114f606820401a26ebc85564736f6c63430008130033",
  "devdoc": {
    "errors": {
      "GovernorAlreadyCastVote(address)": [
        {
          "details": "The vote was already cast."
        }
      ],
      "GovernorInvalidProposalLength(uint256,uint256,uint256)": [
        {
          "details": "Empty proposal or a mismatch between the parameters length for a proposal call."
        }
      ],
      "GovernorInvalidVoteType()": [
        {
          "details": "The vote type used is not valid for the corresponding counting module."
        }
      ],
      "GovernorInvalidVotingPeriod(uint256)": [
        {
          "details": "The voting period set is not a valid period."
        }
      ],
      "GovernorNonexistentProposal(uint256)": [
        {
          "details": "The `proposalId` doesn't exist."
        }
      ],
      "GovernorOnlyExecutor(address)": [
        {
          "details": "The `account` is not the governance executor."
        }
      ],
      "GovernorOnlyProposer(address)": [
        {
          "details": "The `account` is not a proposer."
        }
      ],
      "GovernorProposalAlreadyVotedOn(uint256,uint256)": [
        {
          "details": "Cannot cancel proposal because it has been voted on."
        }
      ],
      "GovernorUnexpectedProposalState(uint256,uint8,bytes32)": [
        {
          "details": "The current state of a proposal is not the required for performing an operation. The `expectedStates` is a bitmap with the bits enabled for each ProposalState enum position counting from right to left. NOTE: If `expectedState` is `bytes32(0)`, the proposal is expected to not be in any state (i.e. not exist). This is the case when a proposal that is expected to be unset is already initiated (the proposal is duplicated). See {Governor-_encodeStateBitmap}."
        }
      ],
      "SafeCastOverflowedUintDowncast(uint8,uint256)": [
        {
          "details": "Value doesn't fit in an uint of `bits` size."
        }
      ]
    },
    "events": {
      "ExecutorChange(address,address)": {
        "details": "Emitted when the executor used for proposal execution is modified."
      },
      "ProposalCanceled(uint256)": {
        "details": "Emitted when a proposal is canceled."
      },
      "ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string)": {
        "details": "Emitted when a proposal is created."
      },
      "ProposalExecuted(uint256)": {
        "details": "Emitted when a proposal is executed."
      },
      "VoteCast(address,uint256,uint8,uint256,string)": {
        "details": "Emitted when a vote. Note: `support` values should be seen as buckets. Their interpretation depends on the voting module used."
      }
    },
    "kind": "dev",
    "methods": {
      "CLOCK_MODE()": {
        "details": "Machine-readable description of the clock as specified in EIP-6372."
      },
      "COUNTING_MODE()": {
        "details": "See {IGovernor-COUNTING_MODE}."
      },
      "cancel(address[],uint256[],bytes[],bytes32)": {
        "details": "See {IGovernor-cancel}."
      },
      "castVote(uint256,uint8)": {
        "details": "See {IGovernor-castVote}."
      },
      "castVoteWithReason(uint256,uint8,string)": {
        "details": "See {IGovernor-castVoteWithReason}."
      },
      "clock()": {
        "details": "Clock (as specified in EIP-6372) is set to timestamp.."
      },
      "execute(address[],uint256[],bytes[],bytes32)": {
        "details": "See {IGovernor-execute}."
      },
      "getProposalVotesCount(uint256)": {
        "details": "See {IGovernor-getProposalVotesCount}."
      },
      "getVotes(address)": {
        "details": "See {IGovernor-getVotes}."
      },
      "hasVoted(uint256,address)": {
        "details": "See {IGovernor-hasVoted}."
      },
      "hashProposal(address[],uint256[],bytes[],bytes32)": {
        "details": "See {IGovernor-hashProposal}. The proposal id is produced by hashing the ABI encoded `targets` array, the `values` array, the `calldatas` array and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in advance, before the proposal is submitted. Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the same proposal (with same operation and same description) will have the same id if submitted on multiple governors across multiple networks. This also means that in order to execute the same operation twice (on the same governor) the proposer will have to change the description in order to avoid proposal id conflicts."
      },
      "name()": {
        "details": "See {IGovernor-name}."
      },
      "proposalDeadline(uint256)": {
        "details": "See {IGovernor-proposalDeadline}."
      },
      "proposalProposer(uint256)": {
        "details": "Returns the account that created a given proposal."
      },
      "proposalSnapshot(uint256)": {
        "details": "See {IGovernor-proposalSnapshot}."
      },
      "proposalVotes(uint256)": {
        "details": "Accessor to the internal vote counts."
      },
      "propose(address[],uint256[],bytes[],string)": {
        "details": "See {IGovernor-propose}. This function has opt-in frontrunning protection, described in {_isValidDescriptionForProposer}."
      },
      "quorum()": {
        "details": "Minimum number of cast voted required for a proposal to be successful."
      },
      "setVotingPeriod(uint256)": {
        "details": "Update the voting period. This operation can only be performed through a governance proposal. Emits a {VotingPeriodSet} event."
      },
      "state(uint256)": {
        "details": "See {IGovernor-state}."
      }
    },
    "stateVariables": {
      "QUORUM": {
        "details": "Set low value during development, should be adjusted in production. Possible value 51 for majority."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "quorum()": {
        "notice": "module:user-config"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2561,
        "contract": "contracts/DAO/GovernorContract.sol:GovernorContract",
        "label": "_executorContract",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IExecutor)427"
      },
      {
        "astId": 1260,
        "contract": "contracts/DAO/GovernorContract.sol:GovernorContract",
        "label": "_name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1266,
        "contract": "contracts/DAO/GovernorContract.sol:GovernorContract",
        "label": "_proposals",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(ProposalCore)1238_storage)"
      },
      {
        "astId": 2652,
        "contract": "contracts/DAO/GovernorContract.sol:GovernorContract",
        "label": "_votingPeriod",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2330,
        "contract": "contracts/DAO/GovernorContract.sol:GovernorContract",
        "label": "_proposalVotes",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(ProposalVote)2325_storage)"
      },
      {
        "astId": 2728,
        "contract": "contracts/DAO/GovernorContract.sol:GovernorContract",
        "label": "userRegistry",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IUserRegistry)595"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IExecutor)427": {
        "encoding": "inplace",
        "label": "contract IExecutor",
        "numberOfBytes": "20"
      },
      "t_contract(IUserRegistry)595": {
        "encoding": "inplace",
        "label": "contract IUserRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(ProposalCore)1238_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Governor.ProposalCore)",
        "numberOfBytes": "32",
        "value": "t_struct(ProposalCore)1238_storage"
      },
      "t_mapping(t_uint256,t_struct(ProposalVote)2325_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GovernorCountingSimple.ProposalVote)",
        "numberOfBytes": "32",
        "value": "t_struct(ProposalVote)2325_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ProposalCore)1238_storage": {
        "encoding": "inplace",
        "label": "struct Governor.ProposalCore",
        "members": [
          {
            "astId": 1229,
            "contract": "contracts/DAO/GovernorContract.sol:GovernorContract",
            "label": "voteStart",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 1231,
            "contract": "contracts/DAO/GovernorContract.sol:GovernorContract",
            "label": "proposer",
            "offset": 8,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1233,
            "contract": "contracts/DAO/GovernorContract.sol:GovernorContract",
            "label": "voteEnd",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 1235,
            "contract": "contracts/DAO/GovernorContract.sol:GovernorContract",
            "label": "executed",
            "offset": 8,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 1237,
            "contract": "contracts/DAO/GovernorContract.sol:GovernorContract",
            "label": "canceled",
            "offset": 9,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ProposalVote)2325_storage": {
        "encoding": "inplace",
        "label": "struct GovernorCountingSimple.ProposalVote",
        "members": [
          {
            "astId": 2316,
            "contract": "contracts/DAO/GovernorContract.sol:GovernorContract",
            "label": "againstVotes",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2318,
            "contract": "contracts/DAO/GovernorContract.sol:GovernorContract",
            "label": "forVotes",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2320,
            "contract": "contracts/DAO/GovernorContract.sol:GovernorContract",
            "label": "abstainVotes",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2324,
            "contract": "contracts/DAO/GovernorContract.sol:GovernorContract",
            "label": "hasVoted",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}
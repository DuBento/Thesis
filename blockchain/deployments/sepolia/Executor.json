{
  "address": "0x2A4540E1840f0bADD6f0833217eBd2Aa0125C04E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "targets",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "payloads",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "values",
          "type": "uint256"
        }
      ],
      "name": "ExecutorInvalidOperationLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ForbiddenTransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UserNotOwner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "CallExecuted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "payloads",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "executeBatch",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "hashOperation",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "payloads",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "hashOperationBatch",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender_",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x1c2c6033910e428364ce87f0a55dac13e69c339af5f87890a5a6930df54eab85",
  "receipt": {
    "to": null,
    "from": "0x90A84A551585BcC79D35Cc737e1A54DfD9ca8eF6",
    "contractAddress": "0x2A4540E1840f0bADD6f0833217eBd2Aa0125C04E",
    "transactionIndex": 20,
    "gasUsed": "671286",
    "logsBloom": "0x
    "blockHash": "0x5fe26b2cb0fad1484fca023752c96cb58eb01ae03dfdce25da1f017318fe87d8",
    "transactionHash": "0x1c2c6033910e428364ce87f0a55dac13e69c339af5f87890a5a6930df54eab85",
    "logs": [],
    "blockNumber": 4319651,
    "cumulativeGasUsed": "13742469",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f7d442adf3a01c94d3c08e2deef7bbc6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"targets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payloads\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"values\",\"type\":\"uint256\"}],\"name\":\"ExecutorInvalidOperationLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ForbiddenTransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserNotOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"CallExecuted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"payloads\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"executeBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"hashOperation\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"payloads\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"hashOperationBatch\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"ExecutorInvalidOperationLength(uint256,uint256,uint256)\":[{\"details\":\"Mismatch between the parameters length for an operation call.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"ReentrantCall()\":[{\"details\":\"Prevent reentrant calls.\"}]},\"events\":{\"CallExecuted(bytes32,uint256,address,uint256,bytes)\":{\"details\":\"Emitted when a call is performed as part of operation `id`.\"}},\"kind\":\"dev\",\"methods\":{\"execute(address,uint256,bytes,bytes32)\":{\"details\":\"Execute an (ready) operation containing a single transaction. Emits a {CallExecuted} event. Only owner can execute, usually Governor Contract.\"},\"executeBatch(address[],uint256[],bytes[],bytes32)\":{\"details\":\"Execute an (ready) operation containing a batch of transactions. Emits one {CallExecuted} event per transaction in the batch. Only owner can execute, usually Governor Contract.\"},\"hashOperation(address,uint256,bytes,bytes32)\":{\"details\":\"Returns the identifier of an operation containing a single transaction.\"},\"hashOperationBatch(address[],uint256[],bytes[],bytes32)\":{\"details\":\"Returns the identifier of an operation containing a batch of transactions.\"},\"init(address)\":{\"details\":\"For use after cloning a contract, where initial memory is 0\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DAO/Executor.sol\":\"Executor\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/DAO/Executor.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n// Based on Openzeppelin Contracts (last updated v4.9.0)\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"../custom/Ownable.sol\\\";\\nimport \\\"../OpenZeppelin/utils/Address.sol\\\";\\nimport \\\"./IExecutor.sol\\\";\\n\\ncontract Executor is IExecutor, Ownable {\\n    // Type declarations\\n    // State variables\\n    bool private locked;\\n\\n    // Modifiers\\n    modifier nonReentrant() {\\n        if (locked) revert ReentrantCall();\\n        locked = true;\\n        _;\\n        locked = false;\\n    }\\n\\n    // Functions\\n    //* constructor\\n    //* receive function\\n    /**\\n     * @dev Contract might receive/hold ETH as part of the maintenance process.\\n     */\\n    receive() external payable override {}\\n\\n    //* fallback function (if exists)\\n    //* external\\n    //* public\\n    /**\\n     * @dev Execute an (ready) operation containing a single transaction.\\n     *\\n     * Emits a {CallExecuted} event.\\n     *\\n     * Only owner can execute, usually Governor Contract.\\n     */\\n    function execute(\\n        address target,\\n        uint256 value,\\n        bytes calldata payload,\\n        bytes32 salt\\n    ) public payable override nonReentrant onlyOwner {\\n        bytes32 id = hashOperation(target, value, payload, salt);\\n\\n        _execute(target, value, payload);\\n        emit CallExecuted(id, 0, target, value, payload);\\n    }\\n\\n    /**\\n     * @dev Execute an (ready) operation containing a batch of transactions.\\n     *\\n     * Emits one {CallExecuted} event per transaction in the batch.\\n     *\\n     * Only owner can execute, usually Governor Contract.\\n     */\\n    function executeBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata payloads,\\n        bytes32 salt\\n    ) public payable override nonReentrant onlyOwner {\\n        if (\\n            targets.length != values.length || targets.length != payloads.length\\n        ) {\\n            revert ExecutorInvalidOperationLength(\\n                targets.length,\\n                payloads.length,\\n                values.length\\n            );\\n        }\\n\\n        bytes32 id = hashOperationBatch(targets, values, payloads, salt);\\n\\n        for (uint256 i = 0; i < targets.length; ++i) {\\n            address target = targets[i];\\n            uint256 value = values[i];\\n            bytes calldata payload = payloads[i];\\n            _execute(target, value, payload);\\n            emit CallExecuted(id, i, target, value, payload);\\n        }\\n    }\\n\\n    //* internal\\n    /**\\n     * @dev Execute an operation's call.\\n     */\\n    function _execute(\\n        address target,\\n        uint256 value,\\n        bytes calldata data\\n    ) internal {\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\n            data\\n        );\\n        Address.verifyCallResult(success, returndata);\\n    }\\n    //* private\\n    //* asserts\\n}\\n\",\"keccak256\":\"0xb05f67f996990d98344dfcacd43991028ccf50e9b113c3f95eb775cff894d784\",\"license\":\"Apache-2.0\"},\"contracts/DAO/IExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n// Based on Openzeppelin Contracts (last updated v4.9.0)\\n\\npragma solidity ^0.8.19;\\n\\nabstract contract IExecutor {\\n    /**\\n     * @dev Emitted when a call is performed as part of operation `id`.\\n     */\\n    event CallExecuted(\\n        bytes32 indexed id,\\n        uint256 indexed index,\\n        address target,\\n        uint256 value,\\n        bytes data\\n    );\\n\\n    // Errors\\n    /**\\n     * @dev Prevent reentrant calls.\\n     */\\n    error ReentrantCall();\\n\\n    /**\\n     * @dev Mismatch between the parameters length for an operation call.\\n     */\\n    error ExecutorInvalidOperationLength(\\n        uint256 targets,\\n        uint256 payloads,\\n        uint256 values\\n    );\\n\\n    /**\\n     * @dev Contract might receive/hold ETH as part of the maintenance process.\\n     */\\n    receive() external payable virtual;\\n\\n    /**\\n     * @dev Execute an (ready) operation containing a single transaction.\\n     *\\n     * Emits a {CallExecuted} event.\\n     *\\n     * Only owner can execute, usually Governor Contract.\\n     */\\n    function execute(\\n        address target,\\n        uint256 value,\\n        bytes calldata payload,\\n        bytes32 salt\\n    ) public payable virtual;\\n\\n    /**\\n     * @dev Execute an (ready) operation containing a batch of transactions.\\n     *\\n     * Emits one {CallExecuted} event per transaction in the batch.\\n     *\\n     * Only owner can execute, usually Governor Contract.\\n     */\\n    function executeBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata payloads,\\n        bytes32 salt\\n    ) public payable virtual;\\n\\n    /**\\n     * @dev Returns the identifier of an operation containing a single\\n     * transaction.\\n     */\\n    function hashOperation(\\n        address target,\\n        uint256 value,\\n        bytes calldata data,\\n        bytes32 salt\\n    ) public pure virtual returns (bytes32) {\\n        return keccak256(abi.encode(target, value, data, salt));\\n    }\\n\\n    /**\\n     * @dev Returns the identifier of an operation containing a batch of\\n     * transactions.\\n     */\\n    function hashOperationBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata payloads,\\n        bytes32 salt\\n    ) public pure virtual returns (bytes32) {\\n        return keccak256(abi.encode(targets, values, payloads, salt));\\n    }\\n}\\n\",\"keccak256\":\"0x43106a629c8319d9316e8a3f4f2dafa11369f35be344f4c9b83dcce0e79b7a65\",\"license\":\"Apache-2.0\"},\"contracts/OpenZeppelin/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.19;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, defaultRevert);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with a\\n     * `customRevert` function as a fallback when `target` reverts.\\n     *\\n     * Requirements:\\n     *\\n     * - `customRevert` must be a reverting function.\\n     *\\n     * _Available since v5.0._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        function() internal view customRevert\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, customRevert);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, defaultRevert);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with a `customRevert` function as a fallback revert reason when `target` reverts.\\n     *\\n     * Requirements:\\n     *\\n     * - `customRevert` must be a reverting function.\\n     *\\n     * _Available since v5.0._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        function() internal view customRevert\\n    ) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, customRevert);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, defaultRevert);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        function() internal view customRevert\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, customRevert);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, defaultRevert);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        function() internal view customRevert\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, customRevert);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided `customRevert`) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v5.0._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        function() internal view customRevert\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check if target is a contract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                if (target.code.length == 0) {\\n                    revert AddressEmptyCode(target);\\n                }\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, customRevert);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or with a default revert error.\\n     *\\n     * _Available since v5.0._\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal view returns (bytes memory) {\\n        return verifyCallResult(success, returndata, defaultRevert);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-verifyCallResult-bool-bytes-}[`verifyCallResult`], but with a\\n     * `customRevert` function as a fallback when `success` is `false`.\\n     *\\n     * Requirements:\\n     *\\n     * - `customRevert` must be a reverting function.\\n     *\\n     * _Available since v5.0._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        function() internal view customRevert\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, customRevert);\\n        }\\n    }\\n\\n    /**\\n     * @dev Default reverting function when no `customRevert` is provided in a function call.\\n     */\\n    function defaultRevert() internal pure {\\n        revert FailedInnerCall();\\n    }\\n\\n    function _revert(bytes memory returndata, function() internal view customRevert) private view {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            customRevert();\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67ca7745e6032aeda339ba3f5813abf9eeb4ec683520944fa878c2867aea58f1\",\"license\":\"MIT\"},\"contracts/custom/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ncontract Ownable {\\n    address public owner;\\n\\n    error UserNotOwner();\\n    error ForbiddenTransferToZeroAddress();\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    modifier onlyOwner() {\\n        _assertIsOwner();\\n        _;\\n    }\\n\\n    /** \\n        @dev For use after cloning a contract, where initial memory is 0\\n    */\\n    function init(address sender_) public {\\n        if (owner == address(0)) owner = sender_;\\n    }\\n\\n    function isOwner() public view returns (bool) {\\n        return msg.sender == owner;\\n    }\\n\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner == address(0)) revert ForbiddenTransferToZeroAddress();\\n        owner = newOwner;\\n    }\\n\\n    function _assertIsOwner() internal view {\\n        if (!isOwner()) revert UserNotOwner();\\n    }\\n}\\n\",\"keccak256\":\"0x7d7751e0df61c0500007a8c511e7c77651f8b0130fecd2c7e20b6066ed89944f\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600080546001600160a01b03191633179055610acd806100326000396000f3fe60806040526004361061007f5760003560e01c80638f32d59b1161004e5780638f32d59b1461012b578063a6cc2c8c14610156578063ec2a5b4514610169578063f2fde38b1461018957600080fd5b806304d2cd0e1461008b57806319ab453c146100be57806388aa4c12146100e05780638da5cb5b146100f357600080fd5b3661008657005b600080fd5b34801561009757600080fd5b506100ab6100a63660046106bd565b6101a9565b6040519081526020015b60405180910390f35b3480156100ca57600080fd5b506100de6100d936600461077c565b6101eb565b005b6100de6100ee366004610797565b610227565b3480156100ff57600080fd5b50600054610113906001600160a01b031681565b6040516001600160a01b0390911681526020016100b5565b34801561013757600080fd5b506000546001600160a01b0316331460405190151581526020016100b5565b6100de6101643660046106bd565b6102df565b34801561017557600080fd5b506100ab610184366004610797565b610489565b34801561019557600080fd5b506100de6101a436600461077c565b6104c5565b6000878787878787876040516020016101c897969594939291906108de565b604051602081830303815290604052805190602001209050979650505050505050565b6000546001600160a01b0316610224576000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383161790555b50565b600054600160a01b900460ff1615610252576040516306fda65d60e31b815260040160405180910390fd5b6000805460ff60a01b1916600160a01b17905561026d61053c565b600061027c8686868686610489565b905061028a86868686610581565b6000817fc2617efa69bab66782fa219543714338489c4e9e178271560a91b82c3f612b58888888886040516102c29493929190610995565b60405180910390a350506000805460ff60a01b1916905550505050565b600054600160a01b900460ff161561030a576040516306fda65d60e31b815260040160405180910390fd5b6000805460ff60a01b1916600160a01b17905561032561053c565b85841415806103345750858214155b15610380576040517fdab4273300000000000000000000000000000000000000000000000000000000815260048101879052602481018390526044810185905260640160405180910390fd5b6000610391888888888888886101a9565b905060005b878110156104715760008989838181106103b2576103b26109c8565b90506020020160208101906103c7919061077c565b905060008888848181106103dd576103dd6109c8565b9050602002013590503660008888868181106103fb576103fb6109c8565b905060200281019061040d91906109de565b9150915061041d84848484610581565b84867fc2617efa69bab66782fa219543714338489c4e9e178271560a91b82c3f612b58868686866040516104549493929190610995565b60405180910390a3505050508061046a90610a25565b9050610396565b50506000805460ff60a01b1916905550505050505050565b600085858585856040516020016104a4959493929190610a4c565b60405160208183030381529060405280519060200120905095945050505050565b6104cd61053c565b6001600160a01b03811661050d576040517f83a3770b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461057f576040517efa70d300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b600080856001600160a01b031685858560405161059f929190610a87565b60006040518083038185875af1925050503d80600081146105dc576040519150601f19603f3d011682016040523d82523d6000602084013e6105e1565b606091505b50915091506105f082826105f9565b50505050505050565b6060610608838361060f610641565b9392505050565b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60608315610650575081610608565b61060883838151156106655781518083602001fd5b61060f8163ffffffff16565b60008083601f84011261068357600080fd5b50813567ffffffffffffffff81111561069b57600080fd5b6020830191508360208260051b85010111156106b657600080fd5b9250929050565b60008060008060008060006080888a0312156106d857600080fd5b873567ffffffffffffffff808211156106f057600080fd5b6106fc8b838c01610671565b909950975060208a013591508082111561071557600080fd5b6107218b838c01610671565b909750955060408a013591508082111561073a57600080fd5b506107478a828b01610671565b989b979a50959894979596606090950135949350505050565b80356001600160a01b038116811461077757600080fd5b919050565b60006020828403121561078e57600080fd5b61060882610760565b6000806000806000608086880312156107af57600080fd5b6107b886610760565b945060208601359350604086013567ffffffffffffffff808211156107dc57600080fd5b818801915088601f8301126107f057600080fd5b8135818111156107ff57600080fd5b89602082850101111561081157600080fd5b96999598505060200195606001359392505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b818352600060208085019450848460051b86018460005b878110156108d15783830389528135601e1988360301811261088757600080fd5b8701858101903567ffffffffffffffff8111156108a357600080fd5b8036038213156108b257600080fd5b6108bd858284610826565b9a87019a9450505090840190600101610866565b5090979650505050505050565b6080808252810187905260008860a08301825b8a81101561091f576001600160a01b0361090a84610760565b168252602092830192909101906001016108f1565b5083810360208501528781527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff88111561095857600080fd5b8760051b9150818960208301370182810360209081016040850152610980908201868861084f565b91505082606083015298975050505050505050565b6001600160a01b03851681528360208201526060604082015260006109be606083018486610826565b9695505050505050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126109f557600080fd5b83018035915067ffffffffffffffff821115610a1057600080fd5b6020019150368190038213156106b657600080fd5b600060018201610a4557634e487b7160e01b600052601160045260246000fd5b5060010190565b6001600160a01b0386168152846020820152608060408201526000610a75608083018587610826565b90508260608301529695505050505050565b818382376000910190815291905056fea26469706673582212209a8e5d1cb9313c5d49e568b5ff77246317d4c8303b88782a6a03c8ccb44755d864736f6c63430008130033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c80638f32d59b1161004e5780638f32d59b1461012b578063a6cc2c8c14610156578063ec2a5b4514610169578063f2fde38b1461018957600080fd5b806304d2cd0e1461008b57806319ab453c146100be57806388aa4c12146100e05780638da5cb5b146100f357600080fd5b3661008657005b600080fd5b34801561009757600080fd5b506100ab6100a63660046106bd565b6101a9565b6040519081526020015b60405180910390f35b3480156100ca57600080fd5b506100de6100d936600461077c565b6101eb565b005b6100de6100ee366004610797565b610227565b3480156100ff57600080fd5b50600054610113906001600160a01b031681565b6040516001600160a01b0390911681526020016100b5565b34801561013757600080fd5b506000546001600160a01b0316331460405190151581526020016100b5565b6100de6101643660046106bd565b6102df565b34801561017557600080fd5b506100ab610184366004610797565b610489565b34801561019557600080fd5b506100de6101a436600461077c565b6104c5565b6000878787878787876040516020016101c897969594939291906108de565b604051602081830303815290604052805190602001209050979650505050505050565b6000546001600160a01b0316610224576000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383161790555b50565b600054600160a01b900460ff1615610252576040516306fda65d60e31b815260040160405180910390fd5b6000805460ff60a01b1916600160a01b17905561026d61053c565b600061027c8686868686610489565b905061028a86868686610581565b6000817fc2617efa69bab66782fa219543714338489c4e9e178271560a91b82c3f612b58888888886040516102c29493929190610995565b60405180910390a350506000805460ff60a01b1916905550505050565b600054600160a01b900460ff161561030a576040516306fda65d60e31b815260040160405180910390fd5b6000805460ff60a01b1916600160a01b17905561032561053c565b85841415806103345750858214155b15610380576040517fdab4273300000000000000000000000000000000000000000000000000000000815260048101879052602481018390526044810185905260640160405180910390fd5b6000610391888888888888886101a9565b905060005b878110156104715760008989838181106103b2576103b26109c8565b90506020020160208101906103c7919061077c565b905060008888848181106103dd576103dd6109c8565b9050602002013590503660008888868181106103fb576103fb6109c8565b905060200281019061040d91906109de565b9150915061041d84848484610581565b84867fc2617efa69bab66782fa219543714338489c4e9e178271560a91b82c3f612b58868686866040516104549493929190610995565b60405180910390a3505050508061046a90610a25565b9050610396565b50506000805460ff60a01b1916905550505050505050565b600085858585856040516020016104a4959493929190610a4c565b60405160208183030381529060405280519060200120905095945050505050565b6104cd61053c565b6001600160a01b03811661050d576040517f83a3770b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461057f576040517efa70d300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b600080856001600160a01b031685858560405161059f929190610a87565b60006040518083038185875af1925050503d80600081146105dc576040519150601f19603f3d011682016040523d82523d6000602084013e6105e1565b606091505b50915091506105f082826105f9565b50505050505050565b6060610608838361060f610641565b9392505050565b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60608315610650575081610608565b61060883838151156106655781518083602001fd5b61060f8163ffffffff16565b60008083601f84011261068357600080fd5b50813567ffffffffffffffff81111561069b57600080fd5b6020830191508360208260051b85010111156106b657600080fd5b9250929050565b60008060008060008060006080888a0312156106d857600080fd5b873567ffffffffffffffff808211156106f057600080fd5b6106fc8b838c01610671565b909950975060208a013591508082111561071557600080fd5b6107218b838c01610671565b909750955060408a013591508082111561073a57600080fd5b506107478a828b01610671565b989b979a50959894979596606090950135949350505050565b80356001600160a01b038116811461077757600080fd5b919050565b60006020828403121561078e57600080fd5b61060882610760565b6000806000806000608086880312156107af57600080fd5b6107b886610760565b945060208601359350604086013567ffffffffffffffff808211156107dc57600080fd5b818801915088601f8301126107f057600080fd5b8135818111156107ff57600080fd5b89602082850101111561081157600080fd5b96999598505060200195606001359392505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b818352600060208085019450848460051b86018460005b878110156108d15783830389528135601e1988360301811261088757600080fd5b8701858101903567ffffffffffffffff8111156108a357600080fd5b8036038213156108b257600080fd5b6108bd858284610826565b9a87019a9450505090840190600101610866565b5090979650505050505050565b6080808252810187905260008860a08301825b8a81101561091f576001600160a01b0361090a84610760565b168252602092830192909101906001016108f1565b5083810360208501528781527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff88111561095857600080fd5b8760051b9150818960208301370182810360209081016040850152610980908201868861084f565b91505082606083015298975050505050505050565b6001600160a01b03851681528360208201526060604082015260006109be606083018486610826565b9695505050505050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126109f557600080fd5b83018035915067ffffffffffffffff821115610a1057600080fd5b6020019150368190038213156106b657600080fd5b600060018201610a4557634e487b7160e01b600052601160045260246000fd5b5060010190565b6001600160a01b0386168152846020820152608060408201526000610a75608083018587610826565b90508260608301529695505050505050565b818382376000910190815291905056fea26469706673582212209a8e5d1cb9313c5d49e568b5ff77246317d4c8303b88782a6a03c8ccb44755d864736f6c63430008130033",
  "devdoc": {
    "errors": {
      "ExecutorInvalidOperationLength(uint256,uint256,uint256)": [
        {
          "details": "Mismatch between the parameters length for an operation call."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "ReentrantCall()": [
        {
          "details": "Prevent reentrant calls."
        }
      ]
    },
    "events": {
      "CallExecuted(bytes32,uint256,address,uint256,bytes)": {
        "details": "Emitted when a call is performed as part of operation `id`."
      }
    },
    "kind": "dev",
    "methods": {
      "execute(address,uint256,bytes,bytes32)": {
        "details": "Execute an (ready) operation containing a single transaction. Emits a {CallExecuted} event. Only owner can execute, usually Governor Contract."
      },
      "executeBatch(address[],uint256[],bytes[],bytes32)": {
        "details": "Execute an (ready) operation containing a batch of transactions. Emits one {CallExecuted} event per transaction in the batch. Only owner can execute, usually Governor Contract."
      },
      "hashOperation(address,uint256,bytes,bytes32)": {
        "details": "Returns the identifier of an operation containing a single transaction."
      },
      "hashOperationBatch(address[],uint256[],bytes[],bytes32)": {
        "details": "Returns the identifier of an operation containing a batch of transactions."
      },
      "init(address)": {
        "details": "For use after cloning a contract, where initial memory is 0"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5634,
        "contract": "contracts/DAO/Executor.sol:Executor",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 59,
        "contract": "contracts/DAO/Executor.sol:Executor",
        "label": "locked",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  }
}
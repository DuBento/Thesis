{
  "address": "0x55825ec831a40578c4A41AbBb13253D0aAE0080A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userRegistry_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ERC1167FailedCreateClone",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ForbiddenTransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UserNotOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "supplychainManager_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "contractDescription_",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "requiredUpdateAttributesKeys_",
          "type": "string[]"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender_",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7598f7203477b3945ccaa5bf549482377846d7d28e9801d22415daeca4362b3e",
  "receipt": {
    "to": null,
    "from": "0x90A84A551585BcC79D35Cc737e1A54DfD9ca8eF6",
    "contractAddress": "0x55825ec831a40578c4A41AbBb13253D0aAE0080A",
    "transactionIndex": 65,
    "gasUsed": "1814993",
    "logsBloom": "0x
    "blockHash": "0x4a384b565f8b341fd1af7d62096355bd77accba906317d9230c1dae8a4bf2c9a",
    "transactionHash": "0x7598f7203477b3945ccaa5bf549482377846d7d28e9801d22415daeca4362b3e",
    "logs": [],
    "blockNumber": 4339364,
    "cumulativeGasUsed": "11222891",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8A2C4f13C2F09cfe3A910C87B8Cb3cf57122202c"
  ],
  "numDeployments": 1,
  "solcInputHash": "187484e067f48039c2365fa39cabe1b7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userRegistry_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ERC1167FailedCreateClone\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ForbiddenTransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserNotOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"supplychainManager_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"contractDescription_\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"requiredUpdateAttributesKeys_\",\"type\":\"string[]\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC1167FailedCreateClone()\":[{\"details\":\"A clone instance deployment failed.\"}]},\"kind\":\"dev\",\"methods\":{\"init(address)\":{\"details\":\"For use after cloning a contract, where initial memory is 0\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Traceability/TraceabilityContractFactory.sol\":\"TraceabilityContractFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/ConformityState.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ncontract ConformityState {\\n    enum State {\\n        FUNCTIONING,\\n        CORRECTIVE_MEASURE_NEEDED,\\n        WAITING_REVIEW\\n    }\\n\\n    State public constant CONFORMITY_STATE_FUNCTIONING = State.FUNCTIONING;\\n    State public constant CONFORMITY_STATE_CORRECTIVE_MEASURE_NEEDED =\\n        State.CORRECTIVE_MEASURE_NEEDED;\\n    State public constant CONFORMITY_STATE_WAITING_REVIEW =\\n        State.WAITING_REVIEW;\\n\\n    // Errors\\n    error InvalidConformityState();\\n\\n    function assertValidConformityState(State state_) internal pure {\\n        if (\\n            state_ != State.FUNCTIONING &&\\n            state_ != State.CORRECTIVE_MEASURE_NEEDED &&\\n            state_ != State.WAITING_REVIEW\\n        ) revert InvalidConformityState();\\n    }\\n}\\n\",\"keccak256\":\"0x218bd1f046511e60abbe3260e066efe507bd153c399b24d737abcc7c6c7f928e\",\"license\":\"Apache-2.0\"},\"contracts/DAO/IUserRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport \\\"../ConformityState.sol\\\";\\n\\n/** @dev @TODO docs\\n */\\nabstract contract IUserRegistry {\\n    uint8 constant MAX_VOTING_POWER = 49;\\n\\n    // Type declarations\\n    struct Member {\\n        address addr;\\n        uint8 votingPower;\\n        ConformityState.State state;\\n        address managingContractAddress;\\n        string name;\\n        string infoURI;\\n    }\\n\\n    struct Actor {\\n        address addr;\\n        ConformityState.State state;\\n        string name;\\n        string infoURI;\\n        address[] participatingContracts;\\n    }\\n\\n    // Errors\\n    error UserAlreadyExists();\\n    error MemberDoesNotExist();\\n    error ActorDoesNotExist();\\n    error TransactionNotFromOriginalActorAddress();\\n    error UserCannotManageContract();\\n    error InvalidVotingPower(uint8 votingPower);\\n\\n    function setTraceabilityContractFactoryAddress(\\n        address addr_\\n    ) external virtual;\\n\\n    function getMember(\\n        address addr_\\n    ) public view virtual returns (Member memory);\\n\\n    function getActor(address addr_) public view virtual returns (Actor memory);\\n\\n    function getActorName(\\n        address addr_\\n    ) public view virtual returns (string memory);\\n\\n    function getVotes(address member_) public view virtual returns (uint8);\\n\\n    function getManagingContractAddress(\\n        address addr_\\n    ) public view virtual returns (address);\\n\\n    function addMember(\\n        address addr_,\\n        string calldata name_,\\n        string calldata infoURI_,\\n        uint8 votingPower_\\n    ) public virtual;\\n\\n    function updateMember(\\n        address addr_,\\n        string calldata name_,\\n        string calldata infoURI_\\n    ) public virtual;\\n\\n    function updateMember(\\n        address addr_,\\n        address managingContractAddress_\\n    ) public virtual;\\n\\n    function updateMemberState(\\n        address addr_,\\n        ConformityState.State newState_\\n    ) public virtual;\\n\\n    function addActor(\\n        address addr_,\\n        string calldata name_,\\n        string calldata infoURI_\\n    ) public virtual;\\n\\n    function updateActor(\\n        address addr_,\\n        string calldata name_,\\n        string calldata infoURI_\\n    ) public virtual;\\n\\n    function updateActorState(\\n        address addr_,\\n        ConformityState.State newState_\\n    ) public virtual;\\n\\n    function addContractToActor(\\n        address contract_,\\n        address actor_\\n    ) public virtual;\\n\\n    function checkAccess(\\n        address contract_,\\n        address addr_\\n    ) public view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0x9bdbf52d0c0c337c3c4f685b7d2d8ead3d529cebcb71869f719dfc8dbb346450\",\"license\":\"Apache-2.0\"},\"contracts/OpenZeppelin/interfaces/IERC6372.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC6372.sol)\\n\\npragma solidity ^0.8.19;\\n\\ninterface IERC6372 {\\n    /**\\n     * @dev Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting).\\n     */\\n    function clock() external view returns (uint256);\\n\\n    /**\\n     * @dev Description of the clock\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function CLOCK_MODE() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xc63ff1f8572f68b3f9f4b5c4823b566041b5abed114b44e5b45d54881deb23c5\",\"license\":\"MIT\"},\"contracts/OpenZeppelin/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.19;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xa388010ee61dd57f063e52ce42f0e2f4fec5d02e60b06fe5ad2aa1497086fd64\",\"license\":\"MIT\"},\"contracts/Traceability/Traceability.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport \\\"../custom/Ownable.sol\\\";\\nimport \\\"../ConformityState.sol\\\";\\nimport \\\"../DAO/IUserRegistry.sol\\\";\\nimport \\\"../OpenZeppelin/interfaces/IERC6372.sol\\\";\\nimport \\\"../OpenZeppelin/utils/math/SafeCast.sol\\\";\\n\\ncontract Traceability is Ownable, ConformityState, IERC6372 {\\n    // Type declarations\\n    struct Batch {\\n        uint256 id;\\n        address currentOwner;\\n        ConformityState.State state;\\n        string description;\\n        Transaction[] transactions;\\n    }\\n\\n    struct Transaction {\\n        address receiver;\\n        string[] additionalAttributesValues;\\n    }\\n\\n    // State variables\\n    mapping(uint256 => Batch) batches;\\n\\n    IUserRegistry private userRegistry;\\n    address private manager;\\n    string private contractDescription;\\n\\n    string[] private requiredTransactionAttributesKeys;\\n\\n    // Events\\n    event NewBatch(address indexed owner, uint256 id);\\n    event Update(\\n        uint256 indexed batchId,\\n        address indexed owner,\\n        uint48 ts,\\n        string documentURI\\n    ); // ts: as specified in EIP-6372\\n\\n    // Errors\\n    error UserIsNotCurrentBatchOwner();\\n    error BatchDoesNotExist();\\n    error UserNotAllowedToTransact();\\n    error BatchFunctioningPause();\\n    error InvalidAdditionalUpdateAttributes();\\n\\n    // Modifiers\\n    modifier allowedActor() {\\n        _assertAllowedActor(msg.sender);\\n        _;\\n    }\\n\\n    // Functions\\n\\n    //* constructor\\n    //* receive function\\n\\n    //* fallback function (if exists)\\n\\n    /** \\n        @dev mitigate metamask node errors\\n    */\\n    fallback() external {}\\n\\n    //* external\\n\\n    function init(\\n        IUserRegistry userRegistry_,\\n        address owner_,\\n        address manager_,\\n        string calldata contractDescription_,\\n        string[] memory requiredTransactionAttributesKeys_\\n    ) external {\\n        if (address(userRegistry) == address(0)) {\\n            // init can only be called once\\n            userRegistry = IUserRegistry(userRegistry_);\\n            manager = manager_;\\n            contractDescription = contractDescription_;\\n            requiredTransactionAttributesKeys = requiredTransactionAttributesKeys_;\\n\\n            super.init(owner_);\\n        }\\n    }\\n\\n    function changeConformityState(\\n        uint256 batchId_,\\n        ConformityState.State newState_\\n    ) external onlyOwner {\\n        ConformityState.assertValidConformityState(newState_);\\n\\n        batches[batchId_].state = newState_;\\n    }\\n\\n    //* public\\n\\n    function getManager() public view returns (address) {\\n        return manager;\\n    }\\n\\n    function getContractDescription() public view returns (string memory) {\\n        return contractDescription;\\n    }\\n\\n    function getRequiredTransactionAttributesKeys()\\n        public\\n        view\\n        returns (string[] memory)\\n    {\\n        return requiredTransactionAttributesKeys;\\n    }\\n\\n    function getBatch(uint256 id_) public view returns (Batch memory) {\\n        return batches[id_];\\n    }\\n\\n    function newBatch(\\n        string memory description_,\\n        string memory documentURI_\\n    ) public allowedActor returns (uint256) {\\n        uint256 batchId = _generateId();\\n        Batch storage batch = batches[batchId];\\n        batch.id = batchId;\\n        batch.description = description_;\\n        batch.currentOwner = msg.sender;\\n        batch.state = ConformityState.CONFORMITY_STATE_FUNCTIONING;\\n\\n        // handle create transaction\\n        Transaction memory transaction = _newTransaction(\\n            batchId,\\n            msg.sender,\\n            documentURI_,\\n            new string[](0)\\n        );\\n        batch.transactions.push(transaction);\\n\\n        emit NewBatch(msg.sender, batch.id);\\n\\n        return batchId;\\n    }\\n\\n    function handleTransaction(\\n        uint256 id_,\\n        address receiver_,\\n        string memory documentURI_,\\n        string[] memory additionalAttributesValues_\\n    ) public allowedActor {\\n        Batch storage batch = batches[id_];\\n        _assertValidUpdate(batch);\\n        _assertAllowedActor(receiver_);\\n        _assertBatchFunctioning(batch);\\n        _assertValidAdditionalAttributes(additionalAttributesValues_);\\n\\n        Transaction memory transaction = _newTransaction(\\n            id_,\\n            receiver_,\\n            documentURI_,\\n            additionalAttributesValues_\\n        );\\n        batch.transactions.push(transaction);\\n\\n        batch.currentOwner = receiver_;\\n    }\\n\\n    function handleUpdate(\\n        uint256 id_,\\n        string memory documentURI_\\n    ) public allowedActor {\\n        Batch storage batch = batches[id_];\\n        _assertValidUpdate(batch);\\n\\n        _newUpdate(id_, documentURI_);\\n    }\\n\\n    /**\\n     * @dev Clock (as specified in EIP-6372) is set to timestamp.\\n     */\\n    function clock() public view virtual override returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Machine-readable description of the clock as specified in EIP-6372.\\n     */\\n    function CLOCK_MODE() public view virtual override returns (string memory) {\\n        return \\\"mode=timestamp\\\";\\n    }\\n\\n    //* internal\\n\\n    /**\\n     * The first update from an actor is the update related to the transaction.\\n     * Defined implicitly to save gas.\\n     */\\n    function _newTransaction(\\n        uint256 id_,\\n        address receiver_,\\n        string memory documentURI_,\\n        string[] memory additionalAttributesValues_\\n    ) internal returns (Transaction memory) {\\n        _newUpdate(id_, documentURI_);\\n        return Transaction(receiver_, additionalAttributesValues_);\\n    }\\n\\n    function _newUpdate(uint256 id_, string memory documentURI_) internal {\\n        emit Update(id_, msg.sender, SafeCast.toUint48(clock()), documentURI_);\\n    }\\n\\n    //* private\\n\\n    function _generateId() private view returns (uint256) {\\n        return\\n            uint256(\\n                keccak256(\\n                    abi.encode(msg.sender, block.timestamp, block.prevrandao)\\n                )\\n            );\\n    }\\n\\n    //* asserts\\n\\n    function _assertValidUpdate(Batch storage batch_) private view {\\n        _assertBatchExists(batch_);\\n        _assertCurrentOwner(batch_);\\n    }\\n\\n    function _assertCurrentOwner(Batch storage batch_) private view {\\n        if (batch_.currentOwner != msg.sender)\\n            revert UserIsNotCurrentBatchOwner();\\n    }\\n\\n    function _assertBatchExists(Batch storage batch_) private view {\\n        if (batch_.id == 0) revert BatchDoesNotExist();\\n    }\\n\\n    function _assertAllowedActor(address addr_) private view {\\n        if (!userRegistry.checkAccess(address(this), addr_))\\n            revert UserNotAllowedToTransact();\\n    }\\n\\n    function _assertBatchFunctioning(Batch storage batch_) private view {\\n        if (batch_.state != ConformityState.CONFORMITY_STATE_FUNCTIONING)\\n            revert BatchFunctioningPause();\\n    }\\n\\n    function _assertValidAdditionalAttributes(\\n        string[] memory additionalAttributesValues_\\n    ) private view {\\n        if (\\n            additionalAttributesValues_.length !=\\n            requiredTransactionAttributesKeys.length\\n        ) revert InvalidAdditionalUpdateAttributes();\\n    }\\n}\\n\",\"keccak256\":\"0x033be1bd0a148327b1ab56001e8d956b209c9590b4be75bf6f0f1dacff568c17\",\"license\":\"Apache-2.0\"},\"contracts/Traceability/TraceabilityContractFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport \\\"./Traceability.sol\\\";\\nimport \\\"../custom/Clone.sol\\\";\\nimport \\\"../custom/Ownable.sol\\\";\\nimport \\\"../DAO/IUserRegistry.sol\\\";\\n\\ncontract TraceabilityContractFactory is Ownable {\\n    address immutable defaultImplementation;\\n    IUserRegistry private userRegistry;\\n\\n    constructor(address userRegistry_) {\\n        userRegistry = IUserRegistry(userRegistry_);\\n        defaultImplementation = address(new Traceability());\\n    }\\n\\n    function create(\\n        address supplychainManager_,\\n        string calldata contractDescription_,\\n        string[] memory requiredUpdateAttributesKeys_\\n    ) external onlyOwner returns (address) {\\n        address clone = Clones.clone(defaultImplementation);\\n\\n        // initialize the clone\\n        Traceability(clone).init(\\n            userRegistry,\\n            msg.sender,\\n            supplychainManager_,\\n            contractDescription_,\\n            requiredUpdateAttributesKeys_\\n        );\\n\\n        userRegistry.updateMember(supplychainManager_, clone);\\n\\n        return clone;\\n    }\\n}\\n\",\"keccak256\":\"0x64a2b26df0bcc027d03f4796a8cf84feadae12f483dce730220b660b7a81831c\",\"license\":\"Apache-2.0\"},\"contracts/custom/Clone.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Based on OpenZeppelin Contracts (simplified)\\n// (last updated v4.9.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.19;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev A clone instance deployment failed.\\n     */\\n    error ERC1167FailedCreateClone();\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(\\n                0x00,\\n                or(\\n                    shr(0xe8, shl(0x60, implementation)),\\n                    0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000\\n                )\\n            )\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(\\n                0x20,\\n                or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3)\\n            )\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        if (instance == address(0)) {\\n            revert ERC1167FailedCreateClone();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe22c7dc1570e1ad9289cd685ee19d44e8c57d6dbd0ae4cec0d49a0704cfb813f\",\"license\":\"MIT\"},\"contracts/custom/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ncontract Ownable {\\n    address public owner;\\n\\n    error UserNotOwner();\\n    error ForbiddenTransferToZeroAddress();\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    modifier onlyOwner() {\\n        _assertIsOwner();\\n        _;\\n    }\\n\\n    /** \\n        @dev For use after cloning a contract, where initial memory is 0\\n    */\\n    function init(address sender_) public {\\n        if (owner == address(0)) owner = sender_;\\n    }\\n\\n    function isOwner() public view returns (bool) {\\n        return msg.sender == owner;\\n    }\\n\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner == address(0)) revert ForbiddenTransferToZeroAddress();\\n        owner = newOwner;\\n    }\\n\\n    function _assertIsOwner() internal view {\\n        if (!isOwner()) revert UserNotOwner();\\n    }\\n}\\n\",\"keccak256\":\"0x7d7751e0df61c0500007a8c511e7c77651f8b0130fecd2c7e20b6066ed89944f\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c80638da5cb5b116100505780638da5cb5b146100b15780638f32d59b146100c4578063f2fde38b146100e257600080fd5b806319ab453c1461006c57806351f08dee14610081575b600080fd5b61007f61007a3660046103d6565b6100f5565b005b61009461008f366004610458565b610131565b6040516001600160a01b0390911681526020015b60405180910390f35b600054610094906001600160a01b031681565b6000546001600160a01b0316331460405190151581526020016100a8565b61007f6100f03660046103d6565b610278565b6000546001600160a01b031661012e576000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383161790555b50565b600061013b6102ef565b60006101667f0000000000000000000000000000000000000000000000000000000000000000610334565b6001546040517f677b61ce0000000000000000000000000000000000000000000000000000000081529192506001600160a01b038084169263677b61ce926101bc92169033908b908b908b908b906004016105d4565b600060405180830381600087803b1580156101d657600080fd5b505af11580156101ea573d6000803e3d6000fd5b50506001546040517f76af28ed0000000000000000000000000000000000000000000000000000000081526001600160a01b038a81166004830152858116602483015290911692506376af28ed9150604401600060405180830381600087803b15801561025657600080fd5b505af115801561026a573d6000803e3d6000fd5b509298975050505050505050565b6102806102ef565b6001600160a01b0381166102c0576040517f83a3770b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610332576040517efa70d300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b0381166103ba576040517fc2f868f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b80356001600160a01b03811681146103ba57600080fd5b6000602082840312156103e857600080fd5b6103f1826103bf565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610450576104506103f8565b604052919050565b6000806000806060858703121561046e57600080fd5b610477856103bf565b935060208086013567ffffffffffffffff8082111561049557600080fd5b818801915088601f8301126104a957600080fd5b8135818111156104b857600080fd5b89848285010111156104c957600080fd5b9183019550909350604087013590808211156104e457600080fd5b818801915088601f8301126104f857600080fd5b81358181111561050a5761050a6103f8565b8060051b610519858201610427565b918252838101850191858101908c84111561053357600080fd5b86860192505b838310156105c3578235858111156105515760008081fd5b8601603f81018e136105635760008081fd5b8781013586811115610577576105776103f8565b610589601f8201601f19168a01610427565b8181528f604083850101111561059f5760008081fd5b81604084018b83013760009181018a01919091528352509186019190860190610539565b999c989b5096995050505050505050565b60006001600160a01b038089168352602081891681850152818816604085015260a060608501528560a0850152858760c0860137600091508160c08786010152601f19601f8181890116860160c0810160c088830301608089015280895180835260e08401915060e08160051b8501019250868b01885b828110156106a45785850360df19018452815180518087528b5b81811015610680578281018c01518882018d01528b01610665565b508681018b018c90528801891690950189019450928801929088019060010161064b565b5050505080965050505050505097965050505050505056fea2646970667358221220a13585d2322a51d517e88f2e6f191e8e7f4cb54d1b27495485181615cecc70b064736f6c63430008130033",
  "devdoc": {
    "errors": {
      "ERC1167FailedCreateClone()": [
        {
          "details": "A clone instance deployment failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "init(address)": {
        "details": "For use after cloning a contract, where initial memory is 0"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2655,
        "contract": "contracts/Traceability/TraceabilityContractFactory.sol:TraceabilityContractFactory",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2557,
        "contract": "contracts/Traceability/TraceabilityContractFactory.sol:TraceabilityContractFactory",
        "label": "userRegistry",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IUserRegistry)216"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IUserRegistry)216": {
        "encoding": "inplace",
        "label": "contract IUserRegistry",
        "numberOfBytes": "20"
      }
    }
  }
}